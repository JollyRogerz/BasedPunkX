"use strict";
/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with @erc725/erc725.js.  If not, see <http://www.gnu.org/licenses/>.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructJSONRPC = exports.decodeResult = void 0;
const abi = __importStar(require("web3-eth-abi"));
const web3_utils_1 = require("web3-utils");
const constants_1 = require("../constants/constants");
let idCount = 0;
const web3abiDecoder = abi.default;
function decodeResult(method, hexString) {
    if (hexString === '0x') {
        return null;
    }
    const decodedData = web3abiDecoder.decodeParameter(constants_1.METHODS[method].returnEncoding, hexString);
    if (Array.isArray(decodedData) &&
        decodedData.length === 1 &&
        decodedData[0] === '0x') {
        return [null];
    }
    return decodedData;
}
exports.decodeResult = decodeResult;
const constructJSONRPCParams = (address, method, gasInfo, methodParam) => {
    const data = methodParam
        ? constants_1.METHODS[method].sig + methodParam.replace('0x', '')
        : constants_1.METHODS[method].sig;
    return [
        Object.assign(Object.assign({ to: address, value: constants_1.METHODS[method].value }, (gasInfo ? { gas: (0, web3_utils_1.numberToHex)(gasInfo) } : {})), { data }),
        'latest',
    ];
};
function constructJSONRPC(address, method, gasInfo, methodParam) {
    idCount += 1;
    return {
        jsonrpc: '2.0',
        method: 'eth_call',
        params: constructJSONRPCParams(address, method, gasInfo, methodParam),
        id: idCount,
    };
}
exports.constructJSONRPC = constructJSONRPC;
//# sourceMappingURL=provider-wrapper-utils.js.map