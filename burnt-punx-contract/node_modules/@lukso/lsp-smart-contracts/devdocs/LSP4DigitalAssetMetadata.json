{
  "author": "Matthew Stevens",
  "details": "Standard Implementation of the LSP4 standard.",
  "errors": {
    "ERC725Y_DataKeysValuesEmptyArray()": [
      {
        "details": "Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."
      }
    ],
    "ERC725Y_DataKeysValuesLengthMismatch()": [
      {
        "details": "Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."
      }
    ],
    "ERC725Y_MsgValueDisallowed()": [
      {
        "details": "Reverts when sending value to the {setData} or {setDataBatch} function."
      }
    ],
    "LSP4TokenNameNotEditable()": [
      {
        "details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
      }
    ],
    "LSP4TokenSymbolNotEditable()": [
      {
        "details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
      }
    ],
    "LSP4TokenTypeNotEditable()": [
      {
        "details": "Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."
      }
    ],
    "OwnableCallerNotTheOwner(address)": [
      {
        "details": "Reverts when only the owner is allowed to call the function.",
        "params": {
          "callerAddress": "The address that tried to make the call."
        }
      }
    ],
    "OwnableCannotSetZeroAddressAsOwner()": [
      {
        "details": "Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."
      }
    ]
  },
  "kind": "dev",
  "methods": {
    "constructor": {
      "params": {
        "initialOwner_": "The owner of the token contract.",
        "lsp4TokenType_": "The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).",
        "name_": "The name of the token.",
        "symbol_": "The symbol of the token."
      }
    },
    "getData(bytes32)": {
      "details": "Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.",
      "params": {
        "dataKey": "The data key for which to retrieve the value."
      },
      "returns": {
        "dataValue": "The bytes value stored under the specified data key."
      }
    },
    "getDataBatch(bytes32[])": {
      "details": "Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.",
      "params": {
        "dataKeys": "The array of keys which values to retrieve"
      },
      "returns": {
        "dataValues": "The array of data stored at multiple keys"
      }
    },
    "owner()": {
      "details": "Returns the address of the current owner."
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "setData(bytes32,bytes)": {
      "custom:events": "{DataChanged} event.",
      "custom:requirements": "- SHOULD only be callable by the {owner}.",
      "custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.",
      "details": "Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.",
      "params": {
        "dataKey": "The data key for which to set a new value.",
        "dataValue": "The new bytes value to set."
      }
    },
    "setDataBatch(bytes32[],bytes[])": {
      "custom:events": "{DataChanged} event **for each data key/value pair set**.",
      "custom:requirements": "- SHOULD only be callable by the {owner} of the contract.",
      "custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**.",
      "details": "Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.",
      "params": {
        "dataKeys": "An array of data keys to set bytes values for.",
        "dataValues": "An array of bytes values to set for each `dataKeys`."
      }
    },
    "supportsInterface(bytes4)": {
      "details": "See {IERC165-supportsInterface}."
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "title": "Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.",
  "version": 1
}