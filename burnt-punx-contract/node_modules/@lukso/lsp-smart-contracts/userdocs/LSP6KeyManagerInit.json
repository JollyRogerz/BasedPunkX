{
  "errors": {
    "BatchExecuteParamsLengthMismatch()": [
      {
        "notice": "The array parameters provided to the function `executeBatch(...)` do not have the same number of elements. (Different array param's length)."
      }
    ],
    "BatchExecuteRelayCallParamsLengthMismatch()": [
      {
        "notice": "The array parameters provided to the function `executeRelayCallBatch(...)` do not have the same number of elements. (Different array param's length)."
      }
    ],
    "CallingKeyManagerNotAllowed()": [
      {
        "notice": "Calling the Key Manager address for this transaction is disallowed."
      }
    ],
    "DelegateCallDisallowedViaKeyManager()": [
      {
        "notice": "Performing DELEGATE CALLS via the Key Manager is currently disallowed."
      }
    ],
    "InvalidDataValuesForDataKeys(bytes32,bytes)": [
      {
        "notice": "Data value: `dataValue` length is different from the required length for the data key which is set."
      }
    ],
    "InvalidERC725Function(bytes4)": [
      {
        "notice": "The Key Manager could not verify the calldata of the transaction because it could not recognise the function being called. Invalid function selector: `invalidFunction`."
      }
    ],
    "InvalidEncodedAllowedCalls(bytes)": [
      {
        "notice": "Could not decode the Allowed Calls. Value = `allowedCallsValue`."
      }
    ],
    "InvalidEncodedAllowedERC725YDataKeys(bytes,string)": [
      {
        "notice": "Error when reading the Allowed ERC725Y Data Keys. Reason: `context`, Allowed ERC725Y Data Keys value read: `value`."
      }
    ],
    "InvalidLSP6Target()": [
      {
        "notice": "Invalid address supplied to link this Key Manager to (`address(0)`)."
      }
    ],
    "InvalidPayload(bytes)": [
      {
        "notice": "Invalid calldata payload sent."
      }
    ],
    "InvalidRelayNonce(address,uint256,bytes)": [
      {
        "notice": "The relay call failed because an invalid nonce was provided for the address `signer` that signed the execute relay call. Invalid nonce: `invalidNonce`, signature of signer: `signature`."
      }
    ],
    "InvalidWhitelistedCall(address)": [
      {
        "notice": "Invalid allowed calls (`0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff`) set for address `from`. Could not perform external call."
      }
    ],
    "KeyManagerCannotBeSetAsExtensionForLSP20Functions()": [
      {
        "notice": "Key Manager cannot be used as an LSP17 extension for LSP20 functions."
      }
    ],
    "LSP6BatchExcessiveValueSent(uint256,uint256)": [
      {
        "notice": "Too much funds sent to forward each amount in the batch. No amount of native tokens should stay in the Key Manager."
      }
    ],
    "LSP6BatchInsufficientValueSent(uint256,uint256)": [
      {
        "notice": "Not enough funds sent to forward each amount in the batch."
      }
    ],
    "NoCallsAllowed(address)": [
      {
        "notice": "The address `from` is not authorised to use the linked account contract to make external calls, because it has no Allowed Calls set."
      }
    ],
    "NoERC725YDataKeysAllowed(address)": [
      {
        "notice": "The address `from` is not authorised to set data, because it has no ERC725Y Data Key allowed."
      }
    ],
    "NoPermissionsSet(address)": [
      {
        "notice": "The address `from` does not have any permission set on the contract linked to the Key Manager."
      }
    ],
    "NotAllowedCall(address,address,bytes4)": [
      {
        "notice": "The address `from` is not authorised to call the function `selector` on the `to` address."
      }
    ],
    "NotAllowedERC725YDataKey(address,bytes32)": [
      {
        "notice": "The address `from` is not authorised to set the data key `disallowedKey` on the contract linked to the Key Manager."
      }
    ],
    "NotAuthorised(address,string)": [
      {
        "notice": "The address `from` is not authorised to `permission` on the contract linked to the Key Manager."
      }
    ],
    "NotRecognisedPermissionKey(bytes32)": [
      {
        "notice": "The data key `dataKey` starts with `AddressPermissions` prefix but is none of the permission data keys defined in LSP6."
      }
    ],
    "RelayCallBeforeStartTime()": [
      {
        "notice": "Relay call not valid yet."
      }
    ],
    "RelayCallExpired()": [
      {
        "notice": "Relay call expired (deadline passed)."
      }
    ]
  },
  "events": {
    "PermissionsVerified(address,uint256,bytes4)": {
      "notice": "Verified the permissions of `signer` for calling function `selector` on the linked account and sending `value` of native token."
    }
  },
  "kind": "user",
  "methods": {
    "VERSION()": {
      "notice": "Contract version."
    },
    "constructor": {
      "notice": "Deploying a LSP6KeyManagerInit to be used as base contract behind proxy."
    },
    "execute(bytes)": {
      "notice": "Executing the following payload on the linked contract: `payload`"
    },
    "executeBatch(uint256[],bytes[])": {
      "notice": "Executing the following batch of payloads and sensind on the linked contract. - payloads: `payloads` - values transferred for each payload: `values`"
    },
    "executeRelayCall(bytes,uint256,uint256,bytes)": {
      "notice": "Executing the following payload given the nonce `nonce` and signature `signature`. Payload: `payload`"
    },
    "executeRelayCallBatch(bytes[],uint256[],uint256[],uint256[],bytes[])": {
      "notice": "Executing a batch of relay calls (= meta-transactions)."
    },
    "getNonce(address,uint128)": {
      "notice": "Reading the latest nonce of address `from` in the channel ID `channelId`."
    },
    "initialize(address)": {
      "notice": "Initializing a LSP6KeyManagerInit linked to contract at address `target_`."
    }
  },
  "version": 1
}