{
  "errors": {
    "LSP8BatchCallFailed(uint256)": [
      {
        "notice": "Batch call failed."
      }
    ],
    "LSP8TokenContractCannotHoldValue()": [
      {
        "notice": "LSP8 contract cannot receive native tokens."
      }
    ]
  },
  "events": {
    "DataChanged(bytes32,bytes)": {
      "notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."
    }
  },
  "kind": "user",
  "methods": {
    "approve(address,uint256)": {
      "notice": "Calling `approve` function to approve operator at address `operator` to transfer tokenId `tokenId` on behalf of its owner."
    },
    "batchCalls(bytes[])": {
      "notice": "Executing the following batch of abi-encoded function calls on the contract: `data`."
    },
    "constructor": {
      "notice": "Deploying a `LSP8CompatibleERC721Mintable` token contract with: token name = `name_`, token symbol = `symbol_`, and address `newOwner_` as the token contract owner."
    },
    "getApproved(uint256)": {
      "notice": "Retrieving the address other than the token owner that is approved to transfer tokenId `tokenId` on behalf of its owner."
    },
    "getData(bytes32)": {
      "notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."
    },
    "getDataBatch(bytes32[])": {
      "notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."
    },
    "getDataBatchForTokenIds(bytes32[],bytes32[])": {
      "notice": "Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."
    },
    "getDataForTokenId(bytes32,bytes32)": {
      "notice": "Retrieves data for a specific `tokenId` and `dataKey`."
    },
    "isApprovedForAll(address,address)": {
      "notice": "Checking if address `operator` is approved to transfer any tokenId owned by address `owner`."
    },
    "mint(address,bytes32,bool,bytes)": {
      "notice": "Minting tokenId `tokenId` for address `to` with the additional data `data` (Note: allow non-LSP1 recipient is set to `force`)."
    },
    "ownerOf(uint256)": {
      "notice": "Retrieving the address that own tokenId `tokenId`."
    },
    "safeTransferFrom(address,address,uint256)": {
      "notice": "Calling `safeTransferFrom` function to transfer tokenId `tokenId` from address `from` to address `to`."
    },
    "safeTransferFrom(address,address,uint256,bytes)": {
      "notice": "Calling `safeTransferFrom` function to transfer tokenId `tokenId` from address `from` to address `to`."
    },
    "setApprovalForAll(address,bool)": {
      "notice": "Setting the \"approval for all\" status of operator `_operator` to `_approved` to allow it to transfer any tokenIds on behalf of `msg.sender`."
    },
    "setData(bytes32,bytes)": {
      "notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."
    },
    "setDataBatch(bytes32[],bytes[])": {
      "notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."
    },
    "setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])": {
      "notice": "Sets data in batch for multiple `tokenId` and `dataKey` pairs."
    },
    "setDataForTokenId(bytes32,bytes32,bytes)": {
      "notice": "Sets data for a specific `tokenId` and `dataKey`."
    },
    "tokenURI(uint256)": {
      "notice": "Retrieving the token URI of tokenId `tokenId`."
    },
    "transferFrom(address,address,uint256)": {
      "notice": "Calling `transferFrom` function to transfer tokenId `tokenId` from address `from` to address `to`."
    }
  },
  "version": 1
}