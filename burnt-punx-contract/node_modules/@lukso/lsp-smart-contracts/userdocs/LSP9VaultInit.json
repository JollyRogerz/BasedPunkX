{
  "errors": {
    "LSP14CannotTransferOwnershipToSelf()": [
      {
        "notice": "Cannot transfer ownership to the address of the contract itself."
      }
    ],
    "LSP14MustAcceptOwnershipInSeparateTransaction()": [
      {
        "notice": "Cannot accept ownership in the same transaction with {transferOwnership(...)}."
      }
    ],
    "LSP14NotInRenounceOwnershipInterval(uint256,uint256)": [
      {
        "notice": "Cannot confirm ownership renouncement yet. The ownership renouncement is allowed from: `renounceOwnershipStart` until: `renounceOwnershipEnd`."
      }
    ],
    "LSP1DelegateNotAllowedToSetDataKey(bytes32)": [
      {
        "notice": "The `LSP1UniversalReceiverDelegate` is not allowed to set the following data key: `dataKey`."
      }
    ]
  },
  "events": {
    "ContractCreated(uint256,address,uint256,bytes32)": {
      "notice": "Deployed new contract at address `contractAddress` and funded with `value` wei (deployed using opcode: `operationType`)."
    },
    "DataChanged(bytes32,bytes)": {
      "notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."
    },
    "Executed(uint256,address,uint256,bytes4)": {
      "notice": "Called address `target` using `operationType` with `value` wei and `data`."
    },
    "OwnershipRenounced()": {
      "notice": "Successfully renounced ownership of the contract. This contract is now owned by anyone, it's owner is `address(0)`."
    },
    "OwnershipTransferStarted(address,address)": {
      "notice": "The transfer of ownership of the contract was initiated. Pending new owner set to: `newOwner`."
    },
    "RenounceOwnershipStarted()": {
      "notice": "Ownership renouncement initiated."
    },
    "UniversalReceiver(address,uint256,bytes32,bytes,bytes)": {
      "notice": "Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`."
    }
  },
  "kind": "user",
  "methods": {
    "VERSION()": {
      "notice": "Contract version."
    },
    "acceptOwnership()": {
      "notice": "`msg.sender` is accepting ownership of contract: `address(this)`."
    },
    "batchCalls(bytes[])": {
      "notice": "Executing the following batch of abi-encoded function calls on the contract: `data`."
    },
    "execute(uint256,address,uint256,bytes)": {
      "notice": "Calling address `target` using `operationType`, transferring `value` wei and data: `data`."
    },
    "executeBatch(uint256[],address[],uint256[],bytes[])": {
      "notice": "Calling multiple addresses `targets` using `operationsType`, transferring `values` wei and data: `datas`."
    },
    "getData(bytes32)": {
      "notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."
    },
    "getDataBatch(bytes32[])": {
      "notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."
    },
    "initialize(address)": {
      "notice": "Initializing a LSP9Vault contract with owner set to address `initialOwner`."
    },
    "renounceOwnership()": {
      "notice": "`msg.sender` is renouncing ownership of contract `address(this)`."
    },
    "setData(bytes32,bytes)": {
      "notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."
    },
    "setDataBatch(bytes32[],bytes[])": {
      "notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."
    },
    "supportsInterface(bytes4)": {
      "notice": "Checking if this contract supports the interface defined by the `bytes4` interface ID `interfaceId`."
    },
    "transferOwnership(address)": {
      "notice": "Transfer ownership initiated by `newOwner`."
    },
    "universalReceiver(bytes32,bytes)": {
      "notice": "Notifying the contract by calling its `universalReceiver` function with the following informations: typeId: `typeId`; data: `data`."
    }
  },
  "version": 1
}