// Generated by dts-bundle-generator v8.0.0

export declare const ErrorSelectors: {
	LSP0ERC725Account: {
		/**
		 * error ERC725X_ContractDeploymentFailed()
		 *
		 * 0x0b07489b = keccak256('ERC725X_ContractDeploymentFailed()')
		 */
		"0x0b07489b": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_CreateOperationsRequireEmptyRecipientAddress()
		 *
		 * 0x3041824a = keccak256('ERC725X_CreateOperationsRequireEmptyRecipientAddress()')
		 */
		"0x3041824a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_InsufficientBalance(
		 *  uint256 balance,
		 *  uint256 value
		 * )
		 *
		 * 0x0df9a8f8 = keccak256('ERC725X_InsufficientBalance(uint256,uint256)')
		 */
		"0x0df9a8f8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					balance: string;
					value: string;
				};
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInDelegateCall()
		 *
		 * 0x5ac83135 = keccak256('ERC725X_MsgValueDisallowedInDelegateCall()')
		 */
		"0x5ac83135": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInStaticCall()
		 *
		 * 0x72f2bc6a = keccak256('ERC725X_MsgValueDisallowedInStaticCall()')
		 */
		"0x72f2bc6a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_NoContractBytecodeProvided()
		 *
		 * 0xb81cd8d9 = keccak256('ERC725X_NoContractBytecodeProvided()')
		 */
		"0xb81cd8d9": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_UnknownOperationType(
		 *  uint256 operationTypeProvided
		 * )
		 *
		 * 0x7583b3bc = keccak256('ERC725X_UnknownOperationType(uint256)')
		 */
		"0x7583b3bc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operationTypeProvided: string;
				};
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP14CallerNotPendingOwner(
		 *  address caller
		 * )
		 *
		 * 0x451e4528 = keccak256('LSP14CallerNotPendingOwner(address)')
		 */
		"0x451e4528": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
		};
		/**
		 * error LSP14CannotTransferOwnershipToSelf()
		 *
		 * 0xe052a6f8 = keccak256('LSP14CannotTransferOwnershipToSelf()')
		 */
		"0xe052a6f8": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14MustAcceptOwnershipInSeparateTransaction()
		 *
		 * 0x5758dd07 = keccak256('LSP14MustAcceptOwnershipInSeparateTransaction()')
		 */
		"0x5758dd07": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14NotInRenounceOwnershipInterval(
		 *  uint256 renounceOwnershipStart,
		 *  uint256 renounceOwnershipEnd
		 * )
		 *
		 * 0x1b080942 = keccak256('LSP14NotInRenounceOwnershipInterval(uint256,uint256)')
		 */
		"0x1b080942": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					renounceOwnershipEnd: string;
					renounceOwnershipStart: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP20CallVerificationFailed(
		 *  bool postCall,
		 *  bytes4 returnedStatus
		 * )
		 *
		 * 0x9d6741e3 = keccak256('LSP20CallVerificationFailed(bool,bytes4)')
		 */
		"0x9d6741e3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
					returnedStatus: string;
				};
			}[];
		};
		/**
		 * error LSP20CallingVerifierFailed(
		 *  bool postCall
		 * )
		 *
		 * 0x8c6a8ae3 = keccak256('LSP20CallingVerifierFailed(bool)')
		 */
		"0x8c6a8ae3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
				};
			}[];
		};
		/**
		 * error LSP20EOACannotVerifyCall(
		 *  address logicVerifier
		 * )
		 *
		 * 0x0c392301 = keccak256('LSP20EOACannotVerifyCall(address)')
		 */
		"0x0c392301": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					logicVerifier: string;
				};
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP0ERC725AccountInit: {
		/**
		 * error ERC725X_ContractDeploymentFailed()
		 *
		 * 0x0b07489b = keccak256('ERC725X_ContractDeploymentFailed()')
		 */
		"0x0b07489b": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_CreateOperationsRequireEmptyRecipientAddress()
		 *
		 * 0x3041824a = keccak256('ERC725X_CreateOperationsRequireEmptyRecipientAddress()')
		 */
		"0x3041824a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_InsufficientBalance(
		 *  uint256 balance,
		 *  uint256 value
		 * )
		 *
		 * 0x0df9a8f8 = keccak256('ERC725X_InsufficientBalance(uint256,uint256)')
		 */
		"0x0df9a8f8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					balance: string;
					value: string;
				};
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInDelegateCall()
		 *
		 * 0x5ac83135 = keccak256('ERC725X_MsgValueDisallowedInDelegateCall()')
		 */
		"0x5ac83135": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInStaticCall()
		 *
		 * 0x72f2bc6a = keccak256('ERC725X_MsgValueDisallowedInStaticCall()')
		 */
		"0x72f2bc6a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_NoContractBytecodeProvided()
		 *
		 * 0xb81cd8d9 = keccak256('ERC725X_NoContractBytecodeProvided()')
		 */
		"0xb81cd8d9": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_UnknownOperationType(
		 *  uint256 operationTypeProvided
		 * )
		 *
		 * 0x7583b3bc = keccak256('ERC725X_UnknownOperationType(uint256)')
		 */
		"0x7583b3bc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operationTypeProvided: string;
				};
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP14CallerNotPendingOwner(
		 *  address caller
		 * )
		 *
		 * 0x451e4528 = keccak256('LSP14CallerNotPendingOwner(address)')
		 */
		"0x451e4528": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
		};
		/**
		 * error LSP14CannotTransferOwnershipToSelf()
		 *
		 * 0xe052a6f8 = keccak256('LSP14CannotTransferOwnershipToSelf()')
		 */
		"0xe052a6f8": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14MustAcceptOwnershipInSeparateTransaction()
		 *
		 * 0x5758dd07 = keccak256('LSP14MustAcceptOwnershipInSeparateTransaction()')
		 */
		"0x5758dd07": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14NotInRenounceOwnershipInterval(
		 *  uint256 renounceOwnershipStart,
		 *  uint256 renounceOwnershipEnd
		 * )
		 *
		 * 0x1b080942 = keccak256('LSP14NotInRenounceOwnershipInterval(uint256,uint256)')
		 */
		"0x1b080942": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					renounceOwnershipEnd: string;
					renounceOwnershipStart: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP20CallVerificationFailed(
		 *  bool postCall,
		 *  bytes4 returnedStatus
		 * )
		 *
		 * 0x9d6741e3 = keccak256('LSP20CallVerificationFailed(bool,bytes4)')
		 */
		"0x9d6741e3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
					returnedStatus: string;
				};
			}[];
		};
		/**
		 * error LSP20CallingVerifierFailed(
		 *  bool postCall
		 * )
		 *
		 * 0x8c6a8ae3 = keccak256('LSP20CallingVerifierFailed(bool)')
		 */
		"0x8c6a8ae3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
				};
			}[];
		};
		/**
		 * error LSP20EOACannotVerifyCall(
		 *  address logicVerifier
		 * )
		 *
		 * 0x0c392301 = keccak256('LSP20EOACannotVerifyCall(address)')
		 */
		"0x0c392301": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					logicVerifier: string;
				};
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP11BasicSocialRecovery: {
		/**
		 * error AddressZeroNotAllowed()
		 *
		 * 0x0855380c = keccak256('AddressZeroNotAllowed()')
		 */
		"0x0855380c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error CallerIsNotGuardian(
		 *  address caller
		 * )
		 *
		 * 0x5560e16d = keccak256('CallerIsNotGuardian(address)')
		 */
		"0x5560e16d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error GuardianAlreadyExist(
		 *  address addressToAdd
		 * )
		 *
		 * 0xd52858db = keccak256('GuardianAlreadyExist(address)')
		 */
		"0xd52858db": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error GuardianDoNotExist(
		 *  address addressToRemove
		 * )
		 *
		 * 0x3d8e524e = keccak256('GuardianDoNotExist(address)')
		 */
		"0x3d8e524e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error GuardiansNumberCannotGoBelowThreshold(
		 *  uint256 guardianThreshold
		 * )
		 *
		 * 0x27113777 = keccak256('GuardiansNumberCannotGoBelowThreshold(uint256)')
		 */
		"0x27113777": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error SecretHashCannotBeZero()
		 *
		 * 0x7f617002 = keccak256('SecretHashCannotBeZero()')
		 */
		"0x7f617002": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ThresholdCannotBeHigherThanGuardiansNumber(
		 *  uint256 thresholdGiven,
		 *  uint256 guardianNumber
		 * )
		 *
		 * 0xe3db80bd = keccak256('ThresholdCannotBeHigherThanGuardiansNumber(uint256,uint256)')
		 */
		"0xe3db80bd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ThresholdNotReachedForRecoverer(
		 *  address recoverer,
		 *  uint256 selections,
		 *  uint256 guardiansThreshold
		 * )
		 *
		 * 0xf78f0507 = keccak256('ThresholdNotReachedForRecoverer(address,uint256,uint256)')
		 */
		"0xf78f0507": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					guardiansThreshold: string;
					recoverer: string;
					selections: string;
				};
			}[];
		};
		/**
		 * error WrongPlainSecret()
		 *
		 * 0x6fa723c3 = keccak256('WrongPlainSecret()')
		 */
		"0x6fa723c3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP11BasicSocialRecoveryInit: {
		/**
		 * error AddressZeroNotAllowed()
		 *
		 * 0x0855380c = keccak256('AddressZeroNotAllowed()')
		 */
		"0x0855380c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error CallerIsNotGuardian(
		 *  address caller
		 * )
		 *
		 * 0x5560e16d = keccak256('CallerIsNotGuardian(address)')
		 */
		"0x5560e16d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error GuardianAlreadyExist(
		 *  address addressToAdd
		 * )
		 *
		 * 0xd52858db = keccak256('GuardianAlreadyExist(address)')
		 */
		"0xd52858db": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error GuardianDoNotExist(
		 *  address addressToRemove
		 * )
		 *
		 * 0x3d8e524e = keccak256('GuardianDoNotExist(address)')
		 */
		"0x3d8e524e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error GuardiansNumberCannotGoBelowThreshold(
		 *  uint256 guardianThreshold
		 * )
		 *
		 * 0x27113777 = keccak256('GuardiansNumberCannotGoBelowThreshold(uint256)')
		 */
		"0x27113777": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error SecretHashCannotBeZero()
		 *
		 * 0x7f617002 = keccak256('SecretHashCannotBeZero()')
		 */
		"0x7f617002": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ThresholdCannotBeHigherThanGuardiansNumber(
		 *  uint256 thresholdGiven,
		 *  uint256 guardianNumber
		 * )
		 *
		 * 0xe3db80bd = keccak256('ThresholdCannotBeHigherThanGuardiansNumber(uint256,uint256)')
		 */
		"0xe3db80bd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ThresholdNotReachedForRecoverer(
		 *  address recoverer,
		 *  uint256 selections,
		 *  uint256 guardiansThreshold
		 * )
		 *
		 * 0xf78f0507 = keccak256('ThresholdNotReachedForRecoverer(address,uint256,uint256)')
		 */
		"0xf78f0507": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					guardiansThreshold: string;
					recoverer: string;
					selections: string;
				};
			}[];
		};
		/**
		 * error WrongPlainSecret()
		 *
		 * 0x6fa723c3 = keccak256('WrongPlainSecret()')
		 */
		"0x6fa723c3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP16UniversalFactory: {
		/**
		 * error ContractInitializationFailed()
		 *
		 * 0xc1ee8543 = keccak256('ContractInitializationFailed()')
		 */
		"0xc1ee8543": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidValueSum()
		 *
		 * 0x2fd9ca91 = keccak256('InvalidValueSum()')
		 */
		"0x2fd9ca91": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP1UniversalReceiverDelegateUP: {
		/**
		 * error CannotRegisterEOAsAsAssets(
		 *  address caller
		 * )
		 *
		 * 0xa5295345 = keccak256('CannotRegisterEOAsAsAssets(address)')
		 */
		"0xa5295345": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
	};
	LSP1UniversalReceiverDelegateVault: {
		/**
		 * error CannotRegisterEOAsAsAssets(
		 *  address caller
		 * )
		 *
		 * 0xa5295345 = keccak256('CannotRegisterEOAsAsAssets(address)')
		 */
		"0xa5295345": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
	};
	LSP23LinkedContractsFactory: {
		/**
		 * error InvalidValueSum()
		 *
		 * 0x2fd9ca91 = keccak256('InvalidValueSum()')
		 */
		"0x2fd9ca91": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error PrimaryContractProxyInitFailureError(
		 *  bytes errorData
		 * )
		 *
		 * 0x4364b6ee = keccak256('PrimaryContractProxyInitFailureError(bytes)')
		 */
		"0x4364b6ee": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					errorData: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error SecondaryContractProxyInitFailureError(
		 *  bytes errorData
		 * )
		 *
		 * 0x9654a854 = keccak256('SecondaryContractProxyInitFailureError(bytes)')
		 */
		"0x9654a854": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					errorData: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
	};
	LSP4DigitalAssetMetadata: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP4DigitalAssetMetadataInitAbstract: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP6KeyManager: {
		/**
		 * error BatchExecuteParamsLengthMismatch()
		 *
		 * 0x55a187db = keccak256('BatchExecuteParamsLengthMismatch()')
		 */
		"0x55a187db": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error BatchExecuteRelayCallParamsLengthMismatch()
		 *
		 * 0xb4d50d21 = keccak256('BatchExecuteRelayCallParamsLengthMismatch()')
		 */
		"0xb4d50d21": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error CallingKeyManagerNotAllowed()
		 *
		 * 0xa431b236 = keccak256('CallingKeyManagerNotAllowed()')
		 */
		"0xa431b236": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error DelegateCallDisallowedViaKeyManager()
		 *
		 * 0x80d6ebae = keccak256('DelegateCallDisallowedViaKeyManager()')
		 */
		"0x80d6ebae": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidDataValuesForDataKeys(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x1fa41397 = keccak256('InvalidDataValuesForDataKeys(bytes32,bytes)')
		 */
		"0x1fa41397": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidERC725Function(
		 *  bytes4 invalidFunction
		 * )
		 *
		 * 0x2ba8851c = keccak256('InvalidERC725Function(bytes4)')
		 */
		"0x2ba8851c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					invalidFunction: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidEncodedAllowedCalls(
		 *  bytes allowedCallsValue
		 * )
		 *
		 * 0x187e77ab = keccak256('InvalidEncodedAllowedCalls(bytes)')
		 */
		"0x187e77ab": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					allowedCallsValue: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidEncodedAllowedERC725YDataKeys(
		 *  bytes value,
		 *  string context
		 * )
		 *
		 * 0xae6cbd37 = keccak256('InvalidEncodedAllowedERC725YDataKeys(bytes,string)')
		 */
		"0xae6cbd37": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					context: string;
					value: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidLSP6Target()
		 *
		 * 0xfc854579 = keccak256('InvalidLSP6Target()')
		 */
		"0xfc854579": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidPayload(
		 *  bytes payload
		 * )
		 *
		 * 0x3621bbcc = keccak256('InvalidPayload(bytes)')
		 */
		"0x3621bbcc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidRelayNonce(
		 *  address signer,
		 *  uint256 invalidNonce,
		 *  bytes signature
		 * )
		 *
		 * 0xc9bd9eb9 = keccak256('InvalidRelayNonce(address,uint256,bytes)')
		 */
		"0xc9bd9eb9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					invalidNonce: string;
					signature: string;
					signer: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidWhitelistedCall(
		 *  address from
		 * )
		 *
		 * 0x6fd203c5 = keccak256('InvalidWhitelistedCall(address)')
		 */
		"0x6fd203c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error KeyManagerCannotBeSetAsExtensionForLSP20Functions()
		 *
		 * 0x4a9fa8cf = keccak256('KeyManagerCannotBeSetAsExtensionForLSP20Functions()')
		 */
		"0x4a9fa8cf": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP6BatchExcessiveValueSent(
		 *  uint256 totalValues,
		 *  uint256 msgValue
		 * )
		 *
		 * 0xa51868b6 = keccak256('LSP6BatchExcessiveValueSent(uint256,uint256)')
		 */
		"0xa51868b6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP6BatchInsufficientValueSent(
		 *  uint256 totalValues,
		 *  uint256 msgValue
		 * )
		 *
		 * 0x30a324ac = keccak256('LSP6BatchInsufficientValueSent(uint256,uint256)')
		 */
		"0x30a324ac": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					msgValue: string;
					totalValues: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoCallsAllowed(
		 *  address from
		 * )
		 *
		 * 0x6cb60587 = keccak256('NoCallsAllowed(address)')
		 */
		"0x6cb60587": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoERC725YDataKeysAllowed(
		 *  address from
		 * )
		 *
		 * 0xed7fa509 = keccak256('NoERC725YDataKeysAllowed(address)')
		 */
		"0xed7fa509": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoPermissionsSet(
		 *  address from
		 * )
		 *
		 * 0xf292052a = keccak256('NoPermissionsSet(address)')
		 */
		"0xf292052a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotAllowedCall(
		 *  address from,
		 *  address to,
		 *  bytes4 selector
		 * )
		 *
		 * 0x45147bce = keccak256('NotAllowedCall(address,address,bytes4)')
		 */
		"0x45147bce": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
					selector: string;
					to: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotAllowedERC725YDataKey(
		 *  address from,
		 *  bytes32 disallowedKey
		 * )
		 *
		 * 0x557ae079 = keccak256('NotAllowedERC725YDataKey(address,bytes32)')
		 */
		"0x557ae079": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					disallowedKey: string;
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotAuthorised(
		 *  address from,
		 *  string permission
		 * )
		 *
		 * 0x3bdad6e6 = keccak256('NotAuthorised(address,string)')
		 */
		"0x3bdad6e6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
					permission: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotRecognisedPermissionKey(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x0f7d735b = keccak256('NotRecognisedPermissionKey(bytes32)')
		 */
		"0x0f7d735b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error RelayCallBeforeStartTime()
		 *
		 * 0x00de4b8a = keccak256('RelayCallBeforeStartTime()')
		 */
		"0x00de4b8a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error RelayCallExpired()
		 *
		 * 0x5c53a98c = keccak256('RelayCallExpired()')
		 */
		"0x5c53a98c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
	};
	LSP6KeyManagerInit: {
		/**
		 * error BatchExecuteParamsLengthMismatch()
		 *
		 * 0x55a187db = keccak256('BatchExecuteParamsLengthMismatch()')
		 */
		"0x55a187db": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error BatchExecuteRelayCallParamsLengthMismatch()
		 *
		 * 0xb4d50d21 = keccak256('BatchExecuteRelayCallParamsLengthMismatch()')
		 */
		"0xb4d50d21": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error CallingKeyManagerNotAllowed()
		 *
		 * 0xa431b236 = keccak256('CallingKeyManagerNotAllowed()')
		 */
		"0xa431b236": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error DelegateCallDisallowedViaKeyManager()
		 *
		 * 0x80d6ebae = keccak256('DelegateCallDisallowedViaKeyManager()')
		 */
		"0x80d6ebae": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidDataValuesForDataKeys(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x1fa41397 = keccak256('InvalidDataValuesForDataKeys(bytes32,bytes)')
		 */
		"0x1fa41397": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidERC725Function(
		 *  bytes4 invalidFunction
		 * )
		 *
		 * 0x2ba8851c = keccak256('InvalidERC725Function(bytes4)')
		 */
		"0x2ba8851c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					invalidFunction: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidEncodedAllowedCalls(
		 *  bytes allowedCallsValue
		 * )
		 *
		 * 0x187e77ab = keccak256('InvalidEncodedAllowedCalls(bytes)')
		 */
		"0x187e77ab": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					allowedCallsValue: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidEncodedAllowedERC725YDataKeys(
		 *  bytes value,
		 *  string context
		 * )
		 *
		 * 0xae6cbd37 = keccak256('InvalidEncodedAllowedERC725YDataKeys(bytes,string)')
		 */
		"0xae6cbd37": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					context: string;
					value: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidLSP6Target()
		 *
		 * 0xfc854579 = keccak256('InvalidLSP6Target()')
		 */
		"0xfc854579": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidPayload(
		 *  bytes payload
		 * )
		 *
		 * 0x3621bbcc = keccak256('InvalidPayload(bytes)')
		 */
		"0x3621bbcc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidRelayNonce(
		 *  address signer,
		 *  uint256 invalidNonce,
		 *  bytes signature
		 * )
		 *
		 * 0xc9bd9eb9 = keccak256('InvalidRelayNonce(address,uint256,bytes)')
		 */
		"0xc9bd9eb9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					invalidNonce: string;
					signature: string;
					signer: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error InvalidWhitelistedCall(
		 *  address from
		 * )
		 *
		 * 0x6fd203c5 = keccak256('InvalidWhitelistedCall(address)')
		 */
		"0x6fd203c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error KeyManagerCannotBeSetAsExtensionForLSP20Functions()
		 *
		 * 0x4a9fa8cf = keccak256('KeyManagerCannotBeSetAsExtensionForLSP20Functions()')
		 */
		"0x4a9fa8cf": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP6BatchExcessiveValueSent(
		 *  uint256 totalValues,
		 *  uint256 msgValue
		 * )
		 *
		 * 0xa51868b6 = keccak256('LSP6BatchExcessiveValueSent(uint256,uint256)')
		 */
		"0xa51868b6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP6BatchInsufficientValueSent(
		 *  uint256 totalValues,
		 *  uint256 msgValue
		 * )
		 *
		 * 0x30a324ac = keccak256('LSP6BatchInsufficientValueSent(uint256,uint256)')
		 */
		"0x30a324ac": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					msgValue: string;
					totalValues: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoCallsAllowed(
		 *  address from
		 * )
		 *
		 * 0x6cb60587 = keccak256('NoCallsAllowed(address)')
		 */
		"0x6cb60587": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoERC725YDataKeysAllowed(
		 *  address from
		 * )
		 *
		 * 0xed7fa509 = keccak256('NoERC725YDataKeysAllowed(address)')
		 */
		"0xed7fa509": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoPermissionsSet(
		 *  address from
		 * )
		 *
		 * 0xf292052a = keccak256('NoPermissionsSet(address)')
		 */
		"0xf292052a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotAllowedCall(
		 *  address from,
		 *  address to,
		 *  bytes4 selector
		 * )
		 *
		 * 0x45147bce = keccak256('NotAllowedCall(address,address,bytes4)')
		 */
		"0x45147bce": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
					selector: string;
					to: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotAllowedERC725YDataKey(
		 *  address from,
		 *  bytes32 disallowedKey
		 * )
		 *
		 * 0x557ae079 = keccak256('NotAllowedERC725YDataKey(address,bytes32)')
		 */
		"0x557ae079": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					disallowedKey: string;
					from: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotAuthorised(
		 *  address from,
		 *  string permission
		 * )
		 *
		 * 0x3bdad6e6 = keccak256('NotAuthorised(address,string)')
		 */
		"0x3bdad6e6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					from: string;
					permission: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NotRecognisedPermissionKey(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x0f7d735b = keccak256('NotRecognisedPermissionKey(bytes32)')
		 */
		"0x0f7d735b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error RelayCallBeforeStartTime()
		 *
		 * 0x00de4b8a = keccak256('RelayCallBeforeStartTime()')
		 */
		"0x00de4b8a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error RelayCallExpired()
		 *
		 * 0x5c53a98c = keccak256('RelayCallExpired()')
		 */
		"0x5c53a98c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
	};
	LSP7DigitalAsset: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7DigitalAssetInitAbstract: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7CappedSupply: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CappedSupplyCannotMintOverCap()
		 *
		 * 0xeacbf0d1 = keccak256('LSP7CappedSupplyCannotMintOverCap()')
		 */
		"0xeacbf0d1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CappedSupplyRequired()
		 *
		 * 0xacf1d8c5 = keccak256('LSP7CappedSupplyRequired()')
		 */
		"0xacf1d8c5": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7CappedSupplyInitAbstract: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CappedSupplyCannotMintOverCap()
		 *
		 * 0xeacbf0d1 = keccak256('LSP7CappedSupplyCannotMintOverCap()')
		 */
		"0xeacbf0d1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CappedSupplyRequired()
		 *
		 * 0xacf1d8c5 = keccak256('LSP7CappedSupplyRequired()')
		 */
		"0xacf1d8c5": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7CompatibleERC20: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7CompatibleERC20InitAbstract: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7CompatibleERC20Mintable: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7CompatibleERC20MintableInit: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7Mintable: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP7MintableInit: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsAuthorizedAmount(
		 *  address tokenOwner,
		 *  uint256 authorizedAmount,
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0xf3a6b691 = keccak256('LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)')
		 */
		"0xf3a6b691": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7AmountExceedsBalance(
		 *  uint256 balance,
		 *  address tokenOwner,
		 *  uint256 amount
		 * )
		 *
		 * 0x08d47949 = keccak256('LSP7AmountExceedsBalance(uint256,address,uint256)')
		 */
		"0x08d47949": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0xb774c284 = keccak256('LSP7BatchCallFailed(uint256)')
		 */
		"0xb774c284": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7CannotSendToSelf()
		 *
		 * 0xb9afb000 = keccak256('LSP7CannotSendToSelf()')
		 */
		"0xb9afb000": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotSendWithAddressZero()
		 *
		 * 0xd2d5ec30 = keccak256('LSP7CannotSendWithAddressZero()')
		 */
		"0xd2d5ec30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7CannotUseAddressZeroAsOperator()
		 *
		 * 0x6355e766 = keccak256('LSP7CannotUseAddressZeroAsOperator()')
		 */
		"0x6355e766": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7DecreasedAllowanceBelowZero()
		 *
		 * 0x0ef76c35 = keccak256('LSP7DecreasedAllowanceBelowZero()')
		 */
		"0x0ef76c35": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7InvalidTransferBatch()
		 *
		 * 0x263eee8d = keccak256('LSP7InvalidTransferBatch()')
		 */
		"0x263eee8d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0xa608fbb6 = keccak256('LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0xa608fbb6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x26c247f4 = keccak256('LSP7NotifyTokenReceiverIsEOA(address)')
		 */
		"0x26c247f4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP7TokenContractCannotHoldValue()
		 *
		 * 0x388f5adc = keccak256('LSP7TokenContractCannotHoldValue()')
		 */
		"0x388f5adc": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP7TokenOwnerCannotBeOperator()
		 *
		 * 0xdab75047 = keccak256('LSP7TokenOwnerCannotBeOperator()')
		 */
		"0xdab75047": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OperatorAllowanceCannotBeIncreasedFromZero(
		 *  address operator
		 * )
		 *
		 * 0xcba6e977 = keccak256('OperatorAllowanceCannotBeIncreasedFromZero(address)')
		 */
		"0xcba6e977": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8IdentifiableDigitalAsset: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8IdentifiableDigitalAssetInitAbstract: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8CappedSupply: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CappedSupplyCannotMintOverCap()
		 *
		 * 0xe8ba2291 = keccak256('LSP8CappedSupplyCannotMintOverCap()')
		 */
		"0xe8ba2291": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CappedSupplyRequired()
		 *
		 * 0x38d9fc30 = keccak256('LSP8CappedSupplyRequired()')
		 */
		"0x38d9fc30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8CappedSupplyInitAbstract: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CappedSupplyCannotMintOverCap()
		 *
		 * 0xe8ba2291 = keccak256('LSP8CappedSupplyCannotMintOverCap()')
		 */
		"0xe8ba2291": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CappedSupplyRequired()
		 *
		 * 0x38d9fc30 = keccak256('LSP8CappedSupplyRequired()')
		 */
		"0x38d9fc30": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8CompatibleERC721: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8CompatibleERC721InitAbstract: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8CompatibleERC721Mintable: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdAlreadyMinted(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x34c7b511 = keccak256('LSP8TokenIdAlreadyMinted(bytes32)')
		 */
		"0x34c7b511": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8CompatibleERC721MintableInit: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdAlreadyMinted(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x34c7b511 = keccak256('LSP8TokenIdAlreadyMinted(bytes32)')
		 */
		"0x34c7b511": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8Mintable: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdAlreadyMinted(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x34c7b511 = keccak256('LSP8TokenIdAlreadyMinted(bytes32)')
		 */
		"0x34c7b511": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP8MintableInit: {
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidExtensionAddress(
		 *  bytes storedData
		 * )
		 *
		 * 0x42bfe79f = keccak256('InvalidExtensionAddress(bytes)')
		 */
		"0x42bfe79f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error InvalidFunctionSelector(
		 *  bytes data
		 * )
		 *
		 * 0xe5099ee3 = keccak256('InvalidFunctionSelector(bytes)')
		 */
		"0xe5099ee3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenNameNotEditable()
		 *
		 * 0x85c169bd = keccak256('LSP4TokenNameNotEditable()')
		 */
		"0x85c169bd": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenSymbolNotEditable()
		 *
		 * 0x76755b38 = keccak256('LSP4TokenSymbolNotEditable()')
		 */
		"0x76755b38": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP4TokenTypeNotEditable()
		 *
		 * 0x4ef6d7fb = keccak256('LSP4TokenTypeNotEditable()')
		 */
		"0x4ef6d7fb": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8BatchCallFailed(
		 *  uint256 callIndex
		 * )
		 *
		 * 0x234eb819 = keccak256('LSP8BatchCallFailed(uint256)')
		 */
		"0x234eb819": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToAddressZero()
		 *
		 * 0x24ecef4d = keccak256('LSP8CannotSendToAddressZero()')
		 */
		"0x24ecef4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotSendToSelf()
		 *
		 * 0x5d67d6c1 = keccak256('LSP8CannotSendToSelf()')
		 */
		"0x5d67d6c1": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8CannotUseAddressZeroAsOperator()
		 *
		 * 0x9577b8b3 = keccak256('LSP8CannotUseAddressZeroAsOperator()')
		 */
		"0x9577b8b3": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8InvalidTransferBatch()
		 *
		 * 0x93a83119 = keccak256('LSP8InvalidTransferBatch()')
		 */
		"0x93a83119": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistentTokenId(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xae8f9a36 = keccak256('LSP8NonExistentTokenId(bytes32)')
		 */
		"0xae8f9a36": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NonExistingOperator(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x4aa31a8c = keccak256('LSP8NonExistingOperator(address,bytes32)')
		 */
		"0x4aa31a8c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOperator(
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x1294d2a9 = keccak256('LSP8NotTokenOperator(bytes32,address)')
		 */
		"0x1294d2a9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotTokenOwner(
		 *  address tokenOwner,
		 *  bytes32 tokenId,
		 *  address caller
		 * )
		 *
		 * 0x5b271ea2 = keccak256('LSP8NotTokenOwner(address,bytes32,address)')
		 */
		"0x5b271ea2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverContractMissingLSP1Interface(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x4349776d = keccak256('LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)')
		 */
		"0x4349776d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8NotifyTokenReceiverIsEOA(
		 *  address tokenReceiver
		 * )
		 *
		 * 0x03173137 = keccak256('LSP8NotifyTokenReceiverIsEOA(address)')
		 */
		"0x03173137": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8OperatorAlreadyAuthorized(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0xa7626b68 = keccak256('LSP8OperatorAlreadyAuthorized(address,bytes32)')
		 */
		"0xa7626b68": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenContractCannotHoldValue()
		 *
		 * 0x61f49442 = keccak256('LSP8TokenContractCannotHoldValue()')
		 */
		"0x61f49442": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP8TokenIdAlreadyMinted(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x34c7b511 = keccak256('LSP8TokenIdAlreadyMinted(bytes32)')
		 */
		"0x34c7b511": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdFormatNotEditable()
		 *
		 * 0x3664800a = keccak256('LSP8TokenIdFormatNotEditable()')
		 */
		"0x3664800a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataEmptyArray()
		 *
		 * 0x80c98305 = keccak256('LSP8TokenIdsDataEmptyArray()')
		 */
		"0x80c98305": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenIdsDataLengthMismatch()
		 *
		 * 0x2fa71dfe = keccak256('LSP8TokenIdsDataLengthMismatch()')
		 */
		"0x2fa71dfe": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP8TokenOwnerCannotBeOperator()
		 *
		 * 0x89fdad62 = keccak256('LSP8TokenOwnerCannotBeOperator()')
		 */
		"0x89fdad62": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
		/**
		 * error OwnableCannotSetZeroAddressAsOwner()
		 *
		 * 0x1ad8836c = keccak256('OwnableCannotSetZeroAddressAsOwner()')
		 */
		"0x1ad8836c": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	LSP9Vault: {
		/**
		 * error ERC725X_ContractDeploymentFailed()
		 *
		 * 0x0b07489b = keccak256('ERC725X_ContractDeploymentFailed()')
		 */
		"0x0b07489b": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_CreateOperationsRequireEmptyRecipientAddress()
		 *
		 * 0x3041824a = keccak256('ERC725X_CreateOperationsRequireEmptyRecipientAddress()')
		 */
		"0x3041824a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_InsufficientBalance(
		 *  uint256 balance,
		 *  uint256 value
		 * )
		 *
		 * 0x0df9a8f8 = keccak256('ERC725X_InsufficientBalance(uint256,uint256)')
		 */
		"0x0df9a8f8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					balance: string;
					value: string;
				};
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInStaticCall()
		 *
		 * 0x72f2bc6a = keccak256('ERC725X_MsgValueDisallowedInStaticCall()')
		 */
		"0x72f2bc6a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_NoContractBytecodeProvided()
		 *
		 * 0xb81cd8d9 = keccak256('ERC725X_NoContractBytecodeProvided()')
		 */
		"0xb81cd8d9": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_UnknownOperationType(
		 *  uint256 operationTypeProvided
		 * )
		 *
		 * 0x7583b3bc = keccak256('ERC725X_UnknownOperationType(uint256)')
		 */
		"0x7583b3bc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operationTypeProvided: string;
				};
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP14CallerNotPendingOwner(
		 *  address caller
		 * )
		 *
		 * 0x451e4528 = keccak256('LSP14CallerNotPendingOwner(address)')
		 */
		"0x451e4528": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
		};
		/**
		 * error LSP14CannotTransferOwnershipToSelf()
		 *
		 * 0xe052a6f8 = keccak256('LSP14CannotTransferOwnershipToSelf()')
		 */
		"0xe052a6f8": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14MustAcceptOwnershipInSeparateTransaction()
		 *
		 * 0x5758dd07 = keccak256('LSP14MustAcceptOwnershipInSeparateTransaction()')
		 */
		"0x5758dd07": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14NotInRenounceOwnershipInterval(
		 *  uint256 renounceOwnershipStart,
		 *  uint256 renounceOwnershipEnd
		 * )
		 *
		 * 0x1b080942 = keccak256('LSP14NotInRenounceOwnershipInterval(uint256,uint256)')
		 */
		"0x1b080942": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					renounceOwnershipEnd: string;
					renounceOwnershipStart: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP1DelegateNotAllowedToSetDataKey(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x199611f1 = keccak256('LSP1DelegateNotAllowedToSetDataKey(bytes32)')
		 */
		"0x199611f1": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
	};
	LSP9VaultInit: {
		/**
		 * error ERC725X_ContractDeploymentFailed()
		 *
		 * 0x0b07489b = keccak256('ERC725X_ContractDeploymentFailed()')
		 */
		"0x0b07489b": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_CreateOperationsRequireEmptyRecipientAddress()
		 *
		 * 0x3041824a = keccak256('ERC725X_CreateOperationsRequireEmptyRecipientAddress()')
		 */
		"0x3041824a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_InsufficientBalance(
		 *  uint256 balance,
		 *  uint256 value
		 * )
		 *
		 * 0x0df9a8f8 = keccak256('ERC725X_InsufficientBalance(uint256,uint256)')
		 */
		"0x0df9a8f8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					balance: string;
					value: string;
				};
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInStaticCall()
		 *
		 * 0x72f2bc6a = keccak256('ERC725X_MsgValueDisallowedInStaticCall()')
		 */
		"0x72f2bc6a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_NoContractBytecodeProvided()
		 *
		 * 0xb81cd8d9 = keccak256('ERC725X_NoContractBytecodeProvided()')
		 */
		"0xb81cd8d9": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_UnknownOperationType(
		 *  uint256 operationTypeProvided
		 * )
		 *
		 * 0x7583b3bc = keccak256('ERC725X_UnknownOperationType(uint256)')
		 */
		"0x7583b3bc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operationTypeProvided: string;
				};
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_MsgValueDisallowed()
		 *
		 * 0xf36ba737 = keccak256('ERC725Y_MsgValueDisallowed()')
		 */
		"0xf36ba737": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP14CallerNotPendingOwner(
		 *  address caller
		 * )
		 *
		 * 0x451e4528 = keccak256('LSP14CallerNotPendingOwner(address)')
		 */
		"0x451e4528": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
		};
		/**
		 * error LSP14CannotTransferOwnershipToSelf()
		 *
		 * 0xe052a6f8 = keccak256('LSP14CannotTransferOwnershipToSelf()')
		 */
		"0xe052a6f8": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14MustAcceptOwnershipInSeparateTransaction()
		 *
		 * 0x5758dd07 = keccak256('LSP14MustAcceptOwnershipInSeparateTransaction()')
		 */
		"0x5758dd07": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14NotInRenounceOwnershipInterval(
		 *  uint256 renounceOwnershipStart,
		 *  uint256 renounceOwnershipEnd
		 * )
		 *
		 * 0x1b080942 = keccak256('LSP14NotInRenounceOwnershipInterval(uint256,uint256)')
		 */
		"0x1b080942": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					renounceOwnershipEnd: string;
					renounceOwnershipStart: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP1DelegateNotAllowedToSetDataKey(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x199611f1 = keccak256('LSP1DelegateNotAllowedToSetDataKey(bytes32)')
		 */
		"0x199611f1": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error OwnableCallerNotTheOwner(
		 *  address callerAddress
		 * )
		 *
		 * 0xbf1169c5 = keccak256('OwnableCallerNotTheOwner(address)')
		 */
		"0xbf1169c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					callerAddress: string;
				};
			}[];
		};
	};
	UniversalProfile: {
		/**
		 * error ERC725X_ContractDeploymentFailed()
		 *
		 * 0x0b07489b = keccak256('ERC725X_ContractDeploymentFailed()')
		 */
		"0x0b07489b": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_CreateOperationsRequireEmptyRecipientAddress()
		 *
		 * 0x3041824a = keccak256('ERC725X_CreateOperationsRequireEmptyRecipientAddress()')
		 */
		"0x3041824a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_InsufficientBalance(
		 *  uint256 balance,
		 *  uint256 value
		 * )
		 *
		 * 0x0df9a8f8 = keccak256('ERC725X_InsufficientBalance(uint256,uint256)')
		 */
		"0x0df9a8f8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					balance: string;
					value: string;
				};
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInDelegateCall()
		 *
		 * 0x5ac83135 = keccak256('ERC725X_MsgValueDisallowedInDelegateCall()')
		 */
		"0x5ac83135": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInStaticCall()
		 *
		 * 0x72f2bc6a = keccak256('ERC725X_MsgValueDisallowedInStaticCall()')
		 */
		"0x72f2bc6a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_NoContractBytecodeProvided()
		 *
		 * 0xb81cd8d9 = keccak256('ERC725X_NoContractBytecodeProvided()')
		 */
		"0xb81cd8d9": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_UnknownOperationType(
		 *  uint256 operationTypeProvided
		 * )
		 *
		 * 0x7583b3bc = keccak256('ERC725X_UnknownOperationType(uint256)')
		 */
		"0x7583b3bc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operationTypeProvided: string;
				};
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP14CallerNotPendingOwner(
		 *  address caller
		 * )
		 *
		 * 0x451e4528 = keccak256('LSP14CallerNotPendingOwner(address)')
		 */
		"0x451e4528": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
		};
		/**
		 * error LSP14CannotTransferOwnershipToSelf()
		 *
		 * 0xe052a6f8 = keccak256('LSP14CannotTransferOwnershipToSelf()')
		 */
		"0xe052a6f8": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14MustAcceptOwnershipInSeparateTransaction()
		 *
		 * 0x5758dd07 = keccak256('LSP14MustAcceptOwnershipInSeparateTransaction()')
		 */
		"0x5758dd07": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14NotInRenounceOwnershipInterval(
		 *  uint256 renounceOwnershipStart,
		 *  uint256 renounceOwnershipEnd
		 * )
		 *
		 * 0x1b080942 = keccak256('LSP14NotInRenounceOwnershipInterval(uint256,uint256)')
		 */
		"0x1b080942": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					renounceOwnershipEnd: string;
					renounceOwnershipStart: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP20CallVerificationFailed(
		 *  bool postCall,
		 *  bytes4 returnedStatus
		 * )
		 *
		 * 0x9d6741e3 = keccak256('LSP20CallVerificationFailed(bool,bytes4)')
		 */
		"0x9d6741e3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
					returnedStatus: string;
				};
			}[];
		};
		/**
		 * error LSP20CallingVerifierFailed(
		 *  bool postCall
		 * )
		 *
		 * 0x8c6a8ae3 = keccak256('LSP20CallingVerifierFailed(bool)')
		 */
		"0x8c6a8ae3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
				};
			}[];
		};
		/**
		 * error LSP20EOACannotVerifyCall(
		 *  address logicVerifier
		 * )
		 *
		 * 0x0c392301 = keccak256('LSP20EOACannotVerifyCall(address)')
		 */
		"0x0c392301": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					logicVerifier: string;
				};
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
	UniversalProfileInit: {
		/**
		 * error ERC725X_ContractDeploymentFailed()
		 *
		 * 0x0b07489b = keccak256('ERC725X_ContractDeploymentFailed()')
		 */
		"0x0b07489b": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_CreateOperationsRequireEmptyRecipientAddress()
		 *
		 * 0x3041824a = keccak256('ERC725X_CreateOperationsRequireEmptyRecipientAddress()')
		 */
		"0x3041824a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersEmptyArray()
		 *
		 * 0xe9ad2b5f = keccak256('ERC725X_ExecuteParametersEmptyArray()')
		 */
		"0xe9ad2b5f": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_ExecuteParametersLengthMismatch()
		 *
		 * 0x3ff55f4d = keccak256('ERC725X_ExecuteParametersLengthMismatch()')
		 */
		"0x3ff55f4d": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_InsufficientBalance(
		 *  uint256 balance,
		 *  uint256 value
		 * )
		 *
		 * 0x0df9a8f8 = keccak256('ERC725X_InsufficientBalance(uint256,uint256)')
		 */
		"0x0df9a8f8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					balance: string;
					value: string;
				};
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInDelegateCall()
		 *
		 * 0x5ac83135 = keccak256('ERC725X_MsgValueDisallowedInDelegateCall()')
		 */
		"0x5ac83135": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_MsgValueDisallowedInStaticCall()
		 *
		 * 0x72f2bc6a = keccak256('ERC725X_MsgValueDisallowedInStaticCall()')
		 */
		"0x72f2bc6a": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_NoContractBytecodeProvided()
		 *
		 * 0xb81cd8d9 = keccak256('ERC725X_NoContractBytecodeProvided()')
		 */
		"0xb81cd8d9": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725X_UnknownOperationType(
		 *  uint256 operationTypeProvided
		 * )
		 *
		 * 0x7583b3bc = keccak256('ERC725X_UnknownOperationType(uint256)')
		 */
		"0x7583b3bc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operationTypeProvided: string;
				};
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesEmptyArray()
		 *
		 * 0x97da5f95 = keccak256('ERC725Y_DataKeysValuesEmptyArray()')
		 */
		"0x97da5f95": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error ERC725Y_DataKeysValuesLengthMismatch()
		 *
		 * 0x3bcc8979 = keccak256('ERC725Y_DataKeysValuesLengthMismatch()')
		 */
		"0x3bcc8979": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
		/**
		 * error LSP14CallerNotPendingOwner(
		 *  address caller
		 * )
		 *
		 * 0x451e4528 = keccak256('LSP14CallerNotPendingOwner(address)')
		 */
		"0x451e4528": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					caller: string;
				};
			}[];
		};
		/**
		 * error LSP14CannotTransferOwnershipToSelf()
		 *
		 * 0xe052a6f8 = keccak256('LSP14CannotTransferOwnershipToSelf()')
		 */
		"0xe052a6f8": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14MustAcceptOwnershipInSeparateTransaction()
		 *
		 * 0x5758dd07 = keccak256('LSP14MustAcceptOwnershipInSeparateTransaction()')
		 */
		"0x5758dd07": {
			sig: string;
			inputs: any[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP14NotInRenounceOwnershipInterval(
		 *  uint256 renounceOwnershipStart,
		 *  uint256 renounceOwnershipEnd
		 * )
		 *
		 * 0x1b080942 = keccak256('LSP14NotInRenounceOwnershipInterval(uint256,uint256)')
		 */
		"0x1b080942": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					renounceOwnershipEnd: string;
					renounceOwnershipStart: string;
				};
			}[];
			userdoc: {
				notice: string;
			}[];
		};
		/**
		 * error LSP20CallVerificationFailed(
		 *  bool postCall,
		 *  bytes4 returnedStatus
		 * )
		 *
		 * 0x9d6741e3 = keccak256('LSP20CallVerificationFailed(bool,bytes4)')
		 */
		"0x9d6741e3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
					returnedStatus: string;
				};
			}[];
		};
		/**
		 * error LSP20CallingVerifierFailed(
		 *  bool postCall
		 * )
		 *
		 * 0x8c6a8ae3 = keccak256('LSP20CallingVerifierFailed(bool)')
		 */
		"0x8c6a8ae3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postCall: string;
				};
			}[];
		};
		/**
		 * error LSP20EOACannotVerifyCall(
		 *  address logicVerifier
		 * )
		 *
		 * 0x0c392301 = keccak256('LSP20EOACannotVerifyCall(address)')
		 */
		"0x0c392301": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					logicVerifier: string;
				};
			}[];
		};
		/**
		 * error NoExtensionFoundForFunctionSelector(
		 *  bytes4 functionSelector
		 * )
		 *
		 * 0xbb370b2b = keccak256('NoExtensionFoundForFunctionSelector(bytes4)')
		 */
		"0xbb370b2b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
			}[];
		};
	};
};
export declare const EventSigHashes: {
	Create2Factory: {
		/**
		 * event ContractCreated(
		 *  address addr,
		 *  bytes32 salt
		 * )
		 *
		 * 0xc16bb3dbd36917c7aa3e76b988c2cd35e74bb230a02fef61e7376d8b4bfaea77 = keccak256('ContractCreated(address,bytes32)')
		 */
		"0xc16bb3dbd36917c7aa3e76b988c2cd35e74bb230a02fef61e7376d8b4bfaea77": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP0ERC725Account: {
		/**
		 * event ContractCreated(
		 *  uint256 indexed operationType,
		 *  address indexed contractAddress,
		 *  uint256 value,
		 *  bytes32 indexed salt
		 * )
		 *
		 * 0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3 = keccak256('ContractCreated(uint256,address,uint256,bytes32)')
		 */
		"0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Executed(
		 *  uint256 indexed operationType,
		 *  address indexed target,
		 *  uint256 value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e = keccak256('Executed(uint256,address,uint256,bytes4)')
		 */
		"0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipRenounced()
		 *
		 * 0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce = keccak256('OwnershipRenounced()')
		 */
		"0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferStarted(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700 = keccak256('OwnershipTransferStarted(address,address)')
		 */
		"0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RenounceOwnershipStarted()
		 *
		 * 0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7 = keccak256('RenounceOwnershipStarted()')
		 */
		"0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event UniversalReceiver(
		 *  address indexed from,
		 *  uint256 indexed value,
		 *  bytes32 indexed typeId,
		 *  bytes receivedData,
		 *  bytes returnedValue
		 * )
		 *
		 * 0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2 = keccak256('UniversalReceiver(address,uint256,bytes32,bytes,bytes)')
		 */
		"0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	LSP0ERC725AccountInit: {
		/**
		 * event ContractCreated(
		 *  uint256 indexed operationType,
		 *  address indexed contractAddress,
		 *  uint256 value,
		 *  bytes32 indexed salt
		 * )
		 *
		 * 0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3 = keccak256('ContractCreated(uint256,address,uint256,bytes32)')
		 */
		"0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Executed(
		 *  uint256 indexed operationType,
		 *  address indexed target,
		 *  uint256 value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e = keccak256('Executed(uint256,address,uint256,bytes4)')
		 */
		"0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipRenounced()
		 *
		 * 0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce = keccak256('OwnershipRenounced()')
		 */
		"0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferStarted(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700 = keccak256('OwnershipTransferStarted(address,address)')
		 */
		"0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RenounceOwnershipStarted()
		 *
		 * 0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7 = keccak256('RenounceOwnershipStarted()')
		 */
		"0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event UniversalReceiver(
		 *  address indexed from,
		 *  uint256 indexed value,
		 *  bytes32 indexed typeId,
		 *  bytes receivedData,
		 *  bytes returnedValue
		 * )
		 *
		 * 0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2 = keccak256('UniversalReceiver(address,uint256,bytes32,bytes,bytes)')
		 */
		"0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	LSP11BasicSocialRecovery: {
		/**
		 * event GuardianAdded(
		 *  address indexed newGuardian
		 * )
		 *
		 * 0x038596bb31e2e7d3d9f184d4c98b310103f6d7f5830e5eec32bffe6f1728f969 = keccak256('GuardianAdded(address)')
		 */
		"0x038596bb31e2e7d3d9f184d4c98b310103f6d7f5830e5eec32bffe6f1728f969": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event GuardianRemoved(
		 *  address indexed removedGuardian
		 * )
		 *
		 * 0xb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c52 = keccak256('GuardianRemoved(address)')
		 */
		"0xb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c52": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event GuardiansThresholdChanged(
		 *  uint256 indexed guardianThreshold
		 * )
		 *
		 * 0x7146d20a2c7b7c75c203774c9f241b61698fac43a4a81ccd828f0d8162392790 = keccak256('GuardiansThresholdChanged(uint256)')
		 */
		"0x7146d20a2c7b7c75c203774c9f241b61698fac43a4a81ccd828f0d8162392790": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RecoveryProcessSuccessful(
		 *  uint256 indexed recoveryCounter,
		 *  address indexed newController,
		 *  bytes32 indexed newSecretHash,
		 *  address[] guardians
		 * )
		 *
		 * 0xf4ff8803d6b43af46d48c200977209829c2f42f19f27eda1c89dbf26a28009cd = keccak256('RecoveryProcessSuccessful(uint256,address,bytes32,address[])')
		 */
		"0xf4ff8803d6b43af46d48c200977209829c2f42f19f27eda1c89dbf26a28009cd": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event SecretHashChanged(
		 *  bytes32 indexed secretHash
		 * )
		 *
		 * 0x2e8c5419a62207ade549fe0b66c1c85c16f5e1ed654815dee3a3f3ac41770df3 = keccak256('SecretHashChanged(bytes32)')
		 */
		"0x2e8c5419a62207ade549fe0b66c1c85c16f5e1ed654815dee3a3f3ac41770df3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event SelectedNewController(
		 *  uint256 indexed recoveryCounter,
		 *  address indexed guardian,
		 *  address indexed addressSelected
		 * )
		 *
		 * 0xe43f3c1093c69ab76b2cf6246090acb2f8eab7f19ba9942dfc8b8ec446e3a3de = keccak256('SelectedNewController(uint256,address,address)')
		 */
		"0xe43f3c1093c69ab76b2cf6246090acb2f8eab7f19ba9942dfc8b8ec446e3a3de": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	LSP11BasicSocialRecoveryInit: {
		/**
		 * event GuardianAdded(
		 *  address indexed newGuardian
		 * )
		 *
		 * 0x038596bb31e2e7d3d9f184d4c98b310103f6d7f5830e5eec32bffe6f1728f969 = keccak256('GuardianAdded(address)')
		 */
		"0x038596bb31e2e7d3d9f184d4c98b310103f6d7f5830e5eec32bffe6f1728f969": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event GuardianRemoved(
		 *  address indexed removedGuardian
		 * )
		 *
		 * 0xb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c52 = keccak256('GuardianRemoved(address)')
		 */
		"0xb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c52": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event GuardiansThresholdChanged(
		 *  uint256 indexed guardianThreshold
		 * )
		 *
		 * 0x7146d20a2c7b7c75c203774c9f241b61698fac43a4a81ccd828f0d8162392790 = keccak256('GuardiansThresholdChanged(uint256)')
		 */
		"0x7146d20a2c7b7c75c203774c9f241b61698fac43a4a81ccd828f0d8162392790": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RecoveryProcessSuccessful(
		 *  uint256 indexed recoveryCounter,
		 *  address indexed newController,
		 *  bytes32 indexed newSecretHash,
		 *  address[] guardians
		 * )
		 *
		 * 0xf4ff8803d6b43af46d48c200977209829c2f42f19f27eda1c89dbf26a28009cd = keccak256('RecoveryProcessSuccessful(uint256,address,bytes32,address[])')
		 */
		"0xf4ff8803d6b43af46d48c200977209829c2f42f19f27eda1c89dbf26a28009cd": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event SecretHashChanged(
		 *  bytes32 indexed secretHash
		 * )
		 *
		 * 0x2e8c5419a62207ade549fe0b66c1c85c16f5e1ed654815dee3a3f3ac41770df3 = keccak256('SecretHashChanged(bytes32)')
		 */
		"0x2e8c5419a62207ade549fe0b66c1c85c16f5e1ed654815dee3a3f3ac41770df3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event SelectedNewController(
		 *  uint256 indexed recoveryCounter,
		 *  address indexed guardian,
		 *  address indexed addressSelected
		 * )
		 *
		 * 0xe43f3c1093c69ab76b2cf6246090acb2f8eab7f19ba9942dfc8b8ec446e3a3de = keccak256('SelectedNewController(uint256,address,address)')
		 */
		"0xe43f3c1093c69ab76b2cf6246090acb2f8eab7f19ba9942dfc8b8ec446e3a3de": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	LSP16UniversalFactory: {
		/**
		 * event ContractCreated(
		 *  address indexed createdContract,
		 *  bytes32 indexed providedSalt,
		 *  bytes32 generatedSalt,
		 *  bool indexed initialized,
		 *  bytes initializeCalldata
		 * )
		 *
		 * 0x8872a323d65599f01bf90dc61c94b4e0cc8e2347d6af4122fccc3e112ee34a84 = keccak256('ContractCreated(address,bytes32,bytes32,bool,bytes)')
		 */
		"0x8872a323d65599f01bf90dc61c94b4e0cc8e2347d6af4122fccc3e112ee34a84": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					createdContract: string;
					generatedSalt: string;
					initializeCalldata: string;
					initialized: string;
					providedSalt: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	LSP23LinkedContractsFactory: {
		/**
		 * event DeployedContracts(
		 *  address indexed primaryContract,
		 *  address indexed secondaryContract,
		 *  tuple primaryContractDeployment,
		 *  tuple secondaryContractDeployment,
		 *  address postDeploymentModule,
		 *  bytes postDeploymentModuleCalldata
		 * )
		 *
		 * 0x0e20ea3d6273aab49a7dabafc15cc94971c12dd63a07185ca810e497e4e87aa6 = keccak256('DeployedContracts(address,address,(bytes32,uint256,bytes),(uint256,bytes,bool,bytes),address,bytes)')
		 */
		"0x0e20ea3d6273aab49a7dabafc15cc94971c12dd63a07185ca810e497e4e87aa6": {
			sig: string;
			anonymous: boolean;
			inputs: ({
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
				components?: undefined;
			} | {
				components: {
					internalType: string;
					name: string;
					type: string;
				}[];
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			})[];
			name: string;
			type: string;
		};
		/**
		 * event DeployedERC1167Proxies(
		 *  address indexed primaryContract,
		 *  address indexed secondaryContract,
		 *  tuple primaryContractDeploymentInit,
		 *  tuple secondaryContractDeploymentInit,
		 *  address postDeploymentModule,
		 *  bytes postDeploymentModuleCalldata
		 * )
		 *
		 * 0xe20570ed9bda3b93eea277b4e5d975c8933fd5f85f2c824d0845ae96c55a54fe = keccak256('DeployedERC1167Proxies(address,address,(bytes32,uint256,address,bytes),(uint256,address,bytes,bool,bytes),address,bytes)')
		 */
		"0xe20570ed9bda3b93eea277b4e5d975c8933fd5f85f2c824d0845ae96c55a54fe": {
			sig: string;
			anonymous: boolean;
			inputs: ({
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
				components?: undefined;
			} | {
				components: {
					internalType: string;
					name: string;
					type: string;
				}[];
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			})[];
			name: string;
			type: string;
		};
	};
	LSP4DigitalAssetMetadata: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP4DigitalAssetMetadataInitAbstract: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP6KeyManager: {
		/**
		 * event PermissionsVerified(
		 *  address indexed signer,
		 *  uint256 indexed value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0xc0a62328f6bf5e3172bb1fcb2019f54b2c523b6a48e3513a2298fbf0150b781e = keccak256('PermissionsVerified(address,uint256,bytes4)')
		 */
		"0xc0a62328f6bf5e3172bb1fcb2019f54b2c523b6a48e3513a2298fbf0150b781e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	LSP6KeyManagerInit: {
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event PermissionsVerified(
		 *  address indexed signer,
		 *  uint256 indexed value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0xc0a62328f6bf5e3172bb1fcb2019f54b2c523b6a48e3513a2298fbf0150b781e = keccak256('PermissionsVerified(address,uint256,bytes4)')
		 */
		"0xc0a62328f6bf5e3172bb1fcb2019f54b2c523b6a48e3513a2298fbf0150b781e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	LSP7DigitalAsset: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7DigitalAssetInitAbstract: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7CappedSupply: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7CappedSupplyInitAbstract: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7CompatibleERC20: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed spender,
		 *  uint256 value
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 value
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7CompatibleERC20InitAbstract: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed spender,
		 *  uint256 value
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 value
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7CompatibleERC20Mintable: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed spender,
		 *  uint256 value
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 value
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7CompatibleERC20MintableInit: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed spender,
		 *  uint256 value
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 value
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7Mintable: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP7MintableInit: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  uint256 indexed amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d = keccak256('OperatorAuthorizationChanged(address,address,uint256,bytes)')
		 */
		"0xf772a43bfdf4729b196e3fb54a818b91a2ca6c49d10b2e16278752f9f515c25d": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bool indexed notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167 = keccak256('OperatorRevoked(address,address,bool,bytes)')
		 */
		"0x0ebf5762d8855cbe012d2ca42fb33a81175e17c8a8751f8859931ba453bd4167": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6 = keccak256('Transfer(address,address,address,uint256,bool,bytes)')
		 */
		"0x3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8IdentifiableDigitalAsset: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8IdentifiableDigitalAssetInitAbstract: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8CappedSupply: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8CappedSupplyInitAbstract: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8CompatibleERC721: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed approved,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event ApprovalForAll(
		 *  address indexed owner,
		 *  address indexed operator,
		 *  bool approved
		 * )
		 *
		 * 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31 = keccak256('ApprovalForAll(address,address,bool)')
		 */
		"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8CompatibleERC721InitAbstract: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed approved,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event ApprovalForAll(
		 *  address indexed owner,
		 *  address indexed operator,
		 *  bool approved
		 * )
		 *
		 * 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31 = keccak256('ApprovalForAll(address,address,bool)')
		 */
		"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8CompatibleERC721Mintable: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed approved,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event ApprovalForAll(
		 *  address indexed owner,
		 *  address indexed operator,
		 *  bool approved
		 * )
		 *
		 * 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31 = keccak256('ApprovalForAll(address,address,bool)')
		 */
		"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8CompatibleERC721MintableInit: {
		/**
		 * event Approval(
		 *  address indexed owner,
		 *  address indexed approved,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925 = keccak256('Approval(address,address,uint256)')
		 */
		"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event ApprovalForAll(
		 *  address indexed owner,
		 *  address indexed operator,
		 *  bool approved
		 * )
		 *
		 * 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31 = keccak256('ApprovalForAll(address,address,bool)')
		 */
		"0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address indexed from,
		 *  address indexed to,
		 *  uint256 indexed tokenId
		 * )
		 *
		 * 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef = keccak256('Transfer(address,address,uint256)')
		 */
		"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8Mintable: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP8MintableInit: {
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorAuthorizationChanged(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215 = keccak256('OperatorAuthorizationChanged(address,address,bytes32,bytes)')
		 */
		"0x1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OperatorRevoked(
		 *  address indexed operator,
		 *  address indexed tokenOwner,
		 *  bytes32 indexed tokenId,
		 *  bool notified,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c = keccak256('OperatorRevoked(address,address,bytes32,bool,bytes)')
		 */
		"0xc78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3c": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event TokenIdDataChanged(
		 *  bytes32 indexed tokenId,
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb = keccak256('TokenIdDataChanged(bytes32,bytes32,bytes)')
		 */
		"0xa6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbb": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event Transfer(
		 *  address operator,
		 *  address indexed from,
		 *  address indexed to,
		 *  bytes32 indexed tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf = keccak256('Transfer(address,address,address,bytes32,bool,bytes)')
		 */
		"0xb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
	};
	LSP9Vault: {
		/**
		 * event ContractCreated(
		 *  uint256 indexed operationType,
		 *  address indexed contractAddress,
		 *  uint256 value,
		 *  bytes32 indexed salt
		 * )
		 *
		 * 0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3 = keccak256('ContractCreated(uint256,address,uint256,bytes32)')
		 */
		"0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Executed(
		 *  uint256 indexed operationType,
		 *  address indexed target,
		 *  uint256 value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e = keccak256('Executed(uint256,address,uint256,bytes4)')
		 */
		"0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipRenounced()
		 *
		 * 0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce = keccak256('OwnershipRenounced()')
		 */
		"0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferStarted(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700 = keccak256('OwnershipTransferStarted(address,address)')
		 */
		"0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RenounceOwnershipStarted()
		 *
		 * 0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7 = keccak256('RenounceOwnershipStarted()')
		 */
		"0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event UniversalReceiver(
		 *  address indexed from,
		 *  uint256 indexed value,
		 *  bytes32 indexed typeId,
		 *  bytes receivedData,
		 *  bytes returnedValue
		 * )
		 *
		 * 0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2 = keccak256('UniversalReceiver(address,uint256,bytes32,bytes,bytes)')
		 */
		"0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	LSP9VaultInit: {
		/**
		 * event ContractCreated(
		 *  uint256 indexed operationType,
		 *  address indexed contractAddress,
		 *  uint256 value,
		 *  bytes32 indexed salt
		 * )
		 *
		 * 0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3 = keccak256('ContractCreated(uint256,address,uint256,bytes32)')
		 */
		"0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Executed(
		 *  uint256 indexed operationType,
		 *  address indexed target,
		 *  uint256 value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e = keccak256('Executed(uint256,address,uint256,bytes4)')
		 */
		"0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipRenounced()
		 *
		 * 0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce = keccak256('OwnershipRenounced()')
		 */
		"0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferStarted(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700 = keccak256('OwnershipTransferStarted(address,address)')
		 */
		"0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RenounceOwnershipStarted()
		 *
		 * 0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7 = keccak256('RenounceOwnershipStarted()')
		 */
		"0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event UniversalReceiver(
		 *  address indexed from,
		 *  uint256 indexed value,
		 *  bytes32 indexed typeId,
		 *  bytes receivedData,
		 *  bytes returnedValue
		 * )
		 *
		 * 0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2 = keccak256('UniversalReceiver(address,uint256,bytes32,bytes,bytes)')
		 */
		"0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	UniversalProfile: {
		/**
		 * event ContractCreated(
		 *  uint256 indexed operationType,
		 *  address indexed contractAddress,
		 *  uint256 value,
		 *  bytes32 indexed salt
		 * )
		 *
		 * 0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3 = keccak256('ContractCreated(uint256,address,uint256,bytes32)')
		 */
		"0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Executed(
		 *  uint256 indexed operationType,
		 *  address indexed target,
		 *  uint256 value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e = keccak256('Executed(uint256,address,uint256,bytes4)')
		 */
		"0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipRenounced()
		 *
		 * 0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce = keccak256('OwnershipRenounced()')
		 */
		"0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferStarted(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700 = keccak256('OwnershipTransferStarted(address,address)')
		 */
		"0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RenounceOwnershipStarted()
		 *
		 * 0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7 = keccak256('RenounceOwnershipStarted()')
		 */
		"0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event UniversalReceiver(
		 *  address indexed from,
		 *  uint256 indexed value,
		 *  bytes32 indexed typeId,
		 *  bytes receivedData,
		 *  bytes returnedValue
		 * )
		 *
		 * 0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2 = keccak256('UniversalReceiver(address,uint256,bytes32,bytes,bytes)')
		 */
		"0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
	UniversalProfileInit: {
		/**
		 * event ContractCreated(
		 *  uint256 indexed operationType,
		 *  address indexed contractAddress,
		 *  uint256 value,
		 *  bytes32 indexed salt
		 * )
		 *
		 * 0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3 = keccak256('ContractCreated(uint256,address,uint256,bytes32)')
		 */
		"0xa1fb700aaee2ae4a2ff6f91ce7eba292f89c2f5488b8ec4c5c5c8150692595c3": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event DataChanged(
		 *  bytes32 indexed dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2 = keccak256('DataChanged(bytes32,bytes)')
		 */
		"0xece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Executed(
		 *  uint256 indexed operationType,
		 *  address indexed target,
		 *  uint256 value,
		 *  bytes4 indexed selector
		 * )
		 *
		 * 0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e = keccak256('Executed(uint256,address,uint256,bytes4)')
		 */
		"0x4810874456b8e6487bd861375cf6abd8e1c8bb5858c8ce36a86a04dabfac199e": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event Initialized(
		 *  uint8 version
		 * )
		 *
		 * 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498 = keccak256('Initialized(uint8)')
		 */
		"0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event OwnershipRenounced()
		 *
		 * 0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce = keccak256('OwnershipRenounced()')
		 */
		"0xd1f66c3d2bc1993a86be5e3d33709d98f0442381befcedd29f578b9b2506b1ce": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferStarted(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700 = keccak256('OwnershipTransferStarted(address,address)')
		 */
		"0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event OwnershipTransferred(
		 *  address indexed previousOwner,
		 *  address indexed newOwner
		 * )
		 *
		 * 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0 = keccak256('OwnershipTransferred(address,address)')
		 */
		"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
		};
		/**
		 * event RenounceOwnershipStarted()
		 *
		 * 0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7 = keccak256('RenounceOwnershipStarted()')
		 */
		"0x81b7f830f1f0084db6497c486cbe6974c86488dcc4e3738eab94ab6d6b1653e7": {
			sig: string;
			anonymous: boolean;
			inputs: any[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * event UniversalReceiver(
		 *  address indexed from,
		 *  uint256 indexed value,
		 *  bytes32 indexed typeId,
		 *  bytes receivedData,
		 *  bytes returnedValue
		 * )
		 *
		 * 0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2 = keccak256('UniversalReceiver(address,uint256,bytes32,bytes,bytes)')
		 */
		"0x9c3ba68eb5742b8e3961aea0afc7371a71bf433c8a67a831803b64c064a178c2": {
			sig: string;
			anonymous: boolean;
			inputs: {
				indexed: boolean;
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
	};
};
export declare const FunctionSelectors: {
	Create2Factory: {
		/**
		 * function computeAddress(
		 *  bytes32 salt,
		 *  bytes32 bytecodeHash
		 * )
		 *
		 * 0x481286e6 = keccak256('computeAddress(bytes32,bytes32)')
		 */
		"0x481286e6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function computeAddress(
		 *  bytes32 salt,
		 *  bytes32 bytecodeHash,
		 *  address deployer
		 * )
		 *
		 * 0x78065306 = keccak256('computeAddress(bytes32,bytes32,address)')
		 */
		"0x78065306": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function deploy(
		 *  bytes32 salt,
		 *  bytes bytecode
		 * )
		 *
		 * 0xcdcb760a = keccak256('deploy(bytes32,bytes)')
		 */
		"0xcdcb760a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP0ERC725Account: {
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()
		 *
		 * 0xead3fbdf = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()')
		 */
		"0xead3fbdf": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()
		 *
		 * 0x01bfba61 = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()')
		 */
		"0x01bfba61": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function acceptOwnership()
		 *
		 * 0x79ba5097 = keccak256('acceptOwnership()')
		 */
		"0x79ba5097": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  uint256 operationType,
		 *  address target,
		 *  uint256 value,
		 *  bytes data
		 * )
		 *
		 * 0x44c028fe = keccak256('execute(uint256,address,uint256,bytes)')
		 */
		"0x44c028fe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					data: string;
					operationType: string;
					target: string;
					value: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] operationsType,
		 *  address[] targets,
		 *  uint256[] values,
		 *  bytes[] datas
		 * )
		 *
		 * 0x31858452 = keccak256('executeBatch(uint256[],address[],uint256[],bytes[])')
		 */
		"0x31858452": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					datas: string;
					operationsType: string;
					targets: string;
					values: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isValidSignature(
		 *  bytes32 dataHash,
		 *  bytes signature
		 * )
		 *
		 * 0x1626ba7e = keccak256('isValidSignature(bytes32,bytes)')
		 */
		"0x1626ba7e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:warning": string;
				details: string;
				params: {
					dataHash: string;
					signature: string;
				};
				returns: {
					returnedStatus: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function pendingOwner()
		 *
		 * 0xe30c3978 = keccak256('pendingOwner()')
		 */
		"0xe30c3978": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					interfaceId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address pendingNewOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					newOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function universalReceiver(
		 *  bytes32 typeId,
		 *  bytes receivedData
		 * )
		 *
		 * 0x6bb56a14 = keccak256('universalReceiver(bytes32,bytes)')
		 */
		"0x6bb56a14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					receivedData: string;
					typeId: string;
				};
				returns: {
					returnedValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	LSP0ERC725AccountInit: {
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()
		 *
		 * 0xead3fbdf = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()')
		 */
		"0xead3fbdf": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()
		 *
		 * 0x01bfba61 = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()')
		 */
		"0x01bfba61": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function acceptOwnership()
		 *
		 * 0x79ba5097 = keccak256('acceptOwnership()')
		 */
		"0x79ba5097": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  uint256 operationType,
		 *  address target,
		 *  uint256 value,
		 *  bytes data
		 * )
		 *
		 * 0x44c028fe = keccak256('execute(uint256,address,uint256,bytes)')
		 */
		"0x44c028fe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					data: string;
					operationType: string;
					target: string;
					value: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] operationsType,
		 *  address[] targets,
		 *  uint256[] values,
		 *  bytes[] datas
		 * )
		 *
		 * 0x31858452 = keccak256('executeBatch(uint256[],address[],uint256[],bytes[])')
		 */
		"0x31858452": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					datas: string;
					operationsType: string;
					targets: string;
					values: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function initialize(
		 *  address initialOwner
		 * )
		 *
		 * 0xc4d66de8 = keccak256('initialize(address)')
		 */
		"0xc4d66de8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					initialOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isValidSignature(
		 *  bytes32 dataHash,
		 *  bytes signature
		 * )
		 *
		 * 0x1626ba7e = keccak256('isValidSignature(bytes32,bytes)')
		 */
		"0x1626ba7e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:warning": string;
				details: string;
				params: {
					dataHash: string;
					signature: string;
				};
				returns: {
					returnedStatus: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function pendingOwner()
		 *
		 * 0xe30c3978 = keccak256('pendingOwner()')
		 */
		"0xe30c3978": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					interfaceId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address pendingNewOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					newOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function universalReceiver(
		 *  bytes32 typeId,
		 *  bytes receivedData
		 * )
		 *
		 * 0x6bb56a14 = keccak256('universalReceiver(bytes32,bytes)')
		 */
		"0x6bb56a14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					receivedData: string;
					typeId: string;
				};
				returns: {
					returnedValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	LSP11BasicSocialRecovery: {
		/**
		 * function addGuardian(
		 *  address newGuardian
		 * )
		 *
		 * 0xa526d83b = keccak256('addGuardian(address)')
		 */
		"0xa526d83b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					newGuardian: string;
				};
			};
		};
		/**
		 * function getGuardianChoice(
		 *  address guardian
		 * )
		 *
		 * 0xf6a22f02 = keccak256('getGuardianChoice(address)')
		 */
		"0xf6a22f02": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					guardian: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function getGuardians()
		 *
		 * 0x0665f04b = keccak256('getGuardians()')
		 */
		"0x0665f04b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function getGuardiansThreshold()
		 *
		 * 0x187c5348 = keccak256('getGuardiansThreshold()')
		 */
		"0x187c5348": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function getRecoveryCounter()
		 *
		 * 0xf79c8b77 = keccak256('getRecoveryCounter()')
		 */
		"0xf79c8b77": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function getRecoverySecretHash()
		 *
		 * 0x8f9083bb = keccak256('getRecoverySecretHash()')
		 */
		"0x8f9083bb": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function isGuardian(
		 *  address _address
		 * )
		 *
		 * 0x0c68ba21 = keccak256('isGuardian(address)')
		 */
		"0x0c68ba21": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					_address: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function recoverOwnership(
		 *  address recoverer,
		 *  string plainSecret,
		 *  bytes32 newSecretHash
		 * )
		 *
		 * 0xae8481b2 = keccak256('recoverOwnership(address,string,bytes32)')
		 */
		"0xae8481b2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					newHash: string;
					plainSecret: string;
					recoverer: string;
				};
			};
		};
		/**
		 * function removeGuardian(
		 *  address existingGuardian
		 * )
		 *
		 * 0x71404156 = keccak256('removeGuardian(address)')
		 */
		"0x71404156": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					currentGuardian: string;
				};
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function selectNewController(
		 *  address addressSelected
		 * )
		 *
		 * 0xaa7806d6 = keccak256('selectNewController(address)')
		 */
		"0xaa7806d6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addressSelected: string;
				};
			};
		};
		/**
		 * function setGuardiansThreshold(
		 *  uint256 newThreshold
		 * )
		 *
		 * 0x6bfed20b = keccak256('setGuardiansThreshold(uint256)')
		 */
		"0x6bfed20b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					guardiansThreshold: string;
				};
			};
		};
		/**
		 * function setRecoverySecretHash(
		 *  bytes32 newRecoverSecretHash
		 * )
		 *
		 * 0xf799e38d = keccak256('setRecoverySecretHash(bytes32)')
		 */
		"0xf799e38d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					newRecoverSecretHash: string;
				};
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 _interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function target()
		 *
		 * 0xd4b83992 = keccak256('target()')
		 */
		"0xd4b83992": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP11BasicSocialRecoveryInit: {
		/**
		 * function addGuardian(
		 *  address newGuardian
		 * )
		 *
		 * 0xa526d83b = keccak256('addGuardian(address)')
		 */
		"0xa526d83b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					newGuardian: string;
				};
			};
		};
		/**
		 * function getGuardianChoice(
		 *  address guardian
		 * )
		 *
		 * 0xf6a22f02 = keccak256('getGuardianChoice(address)')
		 */
		"0xf6a22f02": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					guardian: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function getGuardians()
		 *
		 * 0x0665f04b = keccak256('getGuardians()')
		 */
		"0x0665f04b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function getGuardiansThreshold()
		 *
		 * 0x187c5348 = keccak256('getGuardiansThreshold()')
		 */
		"0x187c5348": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function getRecoveryCounter()
		 *
		 * 0xf79c8b77 = keccak256('getRecoveryCounter()')
		 */
		"0xf79c8b77": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function getRecoverySecretHash()
		 *
		 * 0x8f9083bb = keccak256('getRecoverySecretHash()')
		 */
		"0x8f9083bb": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function initialize(
		 *  address target_,
		 *  address _owner
		 * )
		 *
		 * 0x485cc955 = keccak256('initialize(address,address)')
		 */
		"0x485cc955": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					_owner: string;
					target_: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isGuardian(
		 *  address _address
		 * )
		 *
		 * 0x0c68ba21 = keccak256('isGuardian(address)')
		 */
		"0x0c68ba21": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					_address: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function recoverOwnership(
		 *  address recoverer,
		 *  string plainSecret,
		 *  bytes32 newSecretHash
		 * )
		 *
		 * 0xae8481b2 = keccak256('recoverOwnership(address,string,bytes32)')
		 */
		"0xae8481b2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					newHash: string;
					plainSecret: string;
					recoverer: string;
				};
			};
		};
		/**
		 * function removeGuardian(
		 *  address existingGuardian
		 * )
		 *
		 * 0x71404156 = keccak256('removeGuardian(address)')
		 */
		"0x71404156": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					currentGuardian: string;
				};
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function selectNewController(
		 *  address addressSelected
		 * )
		 *
		 * 0xaa7806d6 = keccak256('selectNewController(address)')
		 */
		"0xaa7806d6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addressSelected: string;
				};
			};
		};
		/**
		 * function setGuardiansThreshold(
		 *  uint256 newThreshold
		 * )
		 *
		 * 0x6bfed20b = keccak256('setGuardiansThreshold(uint256)')
		 */
		"0x6bfed20b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					guardiansThreshold: string;
				};
			};
		};
		/**
		 * function setRecoverySecretHash(
		 *  bytes32 newRecoverSecretHash
		 * )
		 *
		 * 0xf799e38d = keccak256('setRecoverySecretHash(bytes32)')
		 */
		"0xf799e38d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					newRecoverSecretHash: string;
				};
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 _interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function target()
		 *
		 * 0xd4b83992 = keccak256('target()')
		 */
		"0xd4b83992": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP16UniversalFactory: {
		/**
		 * function computeAddress(
		 *  bytes32 byteCodeHash,
		 *  bytes32 providedSalt,
		 *  bool initializable,
		 *  bytes initializeCalldata
		 * )
		 *
		 * 0x3b315680 = keccak256('computeAddress(bytes32,bytes32,bool,bytes)')
		 */
		"0x3b315680": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					byteCodeHash: string;
					initializable: string;
					initializeCalldata: string;
					providedSalt: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function computeERC1167Address(
		 *  address implementationContract,
		 *  bytes32 providedSalt,
		 *  bool initializable,
		 *  bytes initializeCalldata
		 * )
		 *
		 * 0xe888edcb = keccak256('computeERC1167Address(address,bytes32,bool,bytes)')
		 */
		"0xe888edcb": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					implementationContract: string;
					initializable: string;
					initializeCalldata: string;
					providedSalt: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function deployCreate2(
		 *  bytes byteCode,
		 *  bytes32 providedSalt
		 * )
		 *
		 * 0x26736355 = keccak256('deployCreate2(bytes,bytes32)')
		 */
		"0x26736355": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					byteCode: string;
					providedSalt: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function deployCreate2AndInitialize(
		 *  bytes byteCode,
		 *  bytes32 providedSalt,
		 *  bytes initializeCalldata,
		 *  uint256 constructorMsgValue,
		 *  uint256 initializeCalldataMsgValue
		 * )
		 *
		 * 0xcdbd473a = keccak256('deployCreate2AndInitialize(bytes,bytes32,bytes,uint256,uint256)')
		 */
		"0xcdbd473a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					byteCode: string;
					constructorMsgValue: string;
					initializeCalldata: string;
					initializeCalldataMsgValue: string;
					providedSalt: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function deployERC1167Proxy(
		 *  address implementationContract,
		 *  bytes32 providedSalt
		 * )
		 *
		 * 0x49d8abed = keccak256('deployERC1167Proxy(address,bytes32)')
		 */
		"0x49d8abed": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					implementationContract: string;
					providedSalt: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function deployERC1167ProxyAndInitialize(
		 *  address implementationContract,
		 *  bytes32 providedSalt,
		 *  bytes initializeCalldata
		 * )
		 *
		 * 0x5340165f = keccak256('deployERC1167ProxyAndInitialize(address,bytes32,bytes)')
		 */
		"0x5340165f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					implementationContract: string;
					initializeCalldata: string;
					providedSalt: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function generateSalt(
		 *  bytes32 providedSalt,
		 *  bool initializable,
		 *  bytes initializeCalldata
		 * )
		 *
		 * 0x1a17ccbf = keccak256('generateSalt(bytes32,bool,bytes)')
		 */
		"0x1a17ccbf": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					initializable: string;
					initializeCalldata: string;
					providedSalt: string;
				};
				returns: {
					_0: string;
				};
			};
		};
	};
	LSP1UniversalReceiverDelegateUP: {
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function universalReceiverDelegate(
		 *  address notifier,
		 *  uint256 ,
		 *  bytes32 typeId,
		 *  bytes
		 * )
		 *
		 * 0xa245bbda = keccak256('universalReceiverDelegate(address,uint256,bytes32,bytes)')
		 */
		"0xa245bbda": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					typeId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	LSP1UniversalReceiverDelegateVault: {
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function universalReceiverDelegate(
		 *  address notifier,
		 *  uint256 ,
		 *  bytes32 typeId,
		 *  bytes
		 * )
		 *
		 * 0xa245bbda = keccak256('universalReceiverDelegate(address,uint256,bytes32,bytes)')
		 */
		"0xa245bbda": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				"custom:requirements": string;
				details: string;
				params: {
					typeId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	LSP23LinkedContractsFactory: {
		/**
		 * function computeAddresses(
		 *  tuple primaryContractDeployment,
		 *  tuple secondaryContractDeployment,
		 *  address postDeploymentModule,
		 *  bytes postDeploymentModuleCalldata
		 * )
		 *
		 * 0xdd5940f3 = keccak256('computeAddresses((bytes32,uint256,bytes),(uint256,bytes,bool,bytes),address,bytes)')
		 */
		"0xdd5940f3": {
			sig: string;
			inputs: ({
				components: {
					internalType: string;
					name: string;
					type: string;
				}[];
				internalType: string;
				name: string;
				type: string;
			} | {
				internalType: string;
				name: string;
				type: string;
				components?: undefined;
			})[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postDeploymentModule: string;
					postDeploymentModuleCalldata: string;
					primaryContractDeployment: string;
					secondaryContractDeployment: string;
				};
				returns: {
					primaryContractAddress: string;
					secondaryContractAddress: string;
				};
			};
		};
		/**
		 * function computeERC1167Addresses(
		 *  tuple primaryContractDeploymentInit,
		 *  tuple secondaryContractDeploymentInit,
		 *  address postDeploymentModule,
		 *  bytes postDeploymentModuleCalldata
		 * )
		 *
		 * 0x72b19d36 = keccak256('computeERC1167Addresses((bytes32,uint256,address,bytes),(uint256,address,bytes,bool,bytes),address,bytes)')
		 */
		"0x72b19d36": {
			sig: string;
			inputs: ({
				components: {
					internalType: string;
					name: string;
					type: string;
				}[];
				internalType: string;
				name: string;
				type: string;
			} | {
				internalType: string;
				name: string;
				type: string;
				components?: undefined;
			})[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postDeploymentModule: string;
					postDeploymentModuleCalldata: string;
					primaryContractDeploymentInit: string;
					secondaryContractDeploymentInit: string;
				};
				returns: {
					primaryContractAddress: string;
					secondaryContractAddress: string;
				};
			};
		};
		/**
		 * function deployContracts(
		 *  tuple primaryContractDeployment,
		 *  tuple secondaryContractDeployment,
		 *  address postDeploymentModule,
		 *  bytes postDeploymentModuleCalldata
		 * )
		 *
		 * 0x754b86b5 = keccak256('deployContracts((bytes32,uint256,bytes),(uint256,bytes,bool,bytes),address,bytes)')
		 */
		"0x754b86b5": {
			sig: string;
			inputs: ({
				components: {
					internalType: string;
					name: string;
					type: string;
				}[];
				internalType: string;
				name: string;
				type: string;
			} | {
				internalType: string;
				name: string;
				type: string;
				components?: undefined;
			})[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postDeploymentModule: string;
					postDeploymentModuleCalldata: string;
					primaryContractDeployment: string;
					secondaryContractDeployment: string;
				};
				returns: {
					primaryContractAddress: string;
					secondaryContractAddress: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function deployERC1167Proxies(
		 *  tuple primaryContractDeploymentInit,
		 *  tuple secondaryContractDeploymentInit,
		 *  address postDeploymentModule,
		 *  bytes postDeploymentModuleCalldata
		 * )
		 *
		 * 0x6a66a753 = keccak256('deployERC1167Proxies((bytes32,uint256,address,bytes),(uint256,address,bytes,bool,bytes),address,bytes)')
		 */
		"0x6a66a753": {
			sig: string;
			inputs: ({
				components: {
					internalType: string;
					name: string;
					type: string;
				}[];
				internalType: string;
				name: string;
				type: string;
			} | {
				internalType: string;
				name: string;
				type: string;
				components?: undefined;
			})[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					postDeploymentModule: string;
					postDeploymentModuleCalldata: string;
					primaryContractDeploymentInit: string;
					secondaryContractDeploymentInit: string;
				};
				returns: {
					primaryContractAddress: string;
					secondaryContractAddress: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	LSP4DigitalAssetMetadata: {
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP4DigitalAssetMetadataInitAbstract: {
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP6KeyManager: {
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  bytes payload
		 * )
		 *
		 * 0x09c5eabe = keccak256('execute(bytes)')
		 */
		"0x09c5eabe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					payload: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] values,
		 *  bytes[] payloads
		 * )
		 *
		 * 0xbf0176ff = keccak256('executeBatch(uint256[],bytes[])')
		 */
		"0xbf0176ff": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					payloads: string;
					values: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeRelayCall(
		 *  bytes signature,
		 *  uint256 nonce,
		 *  uint256 validityTimestamps,
		 *  bytes payload
		 * )
		 *
		 * 0x4c8a4e74 = keccak256('executeRelayCall(bytes,uint256,uint256,bytes)')
		 */
		"0x4c8a4e74": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:hint": string;
				details: string;
				params: {
					nonce: string;
					payload: string;
					signature: string;
					validityTimestamps: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeRelayCallBatch(
		 *  bytes[] signatures,
		 *  uint256[] nonces,
		 *  uint256[] validityTimestamps,
		 *  uint256[] values,
		 *  bytes[] payloads
		 * )
		 *
		 * 0xa20856a5 = keccak256('executeRelayCallBatch(bytes[],uint256[],uint256[],uint256[],bytes[])')
		 */
		"0xa20856a5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					nonces: string;
					payloads: string;
					signatures: string;
					validityTimestamps: string;
					values: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getNonce(
		 *  address from,
		 *  uint128 channelId
		 * )
		 *
		 * 0xb44581d9 = keccak256('getNonce(address,uint128)')
		 */
		"0xb44581d9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:hint": string;
				details: string;
				params: {
					channelId: string;
					from: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isValidSignature(
		 *  bytes32 dataHash,
		 *  bytes signature
		 * )
		 *
		 * 0x1626ba7e = keccak256('isValidSignature(bytes32,bytes)')
		 */
		"0x1626ba7e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:warning": string;
				details: string;
				params: {
					hash: string;
					signature: string;
				};
				returns: {
					returnedStatus: string;
				};
			};
		};
		/**
		 * function lsp20VerifyCall(
		 *  address ,
		 *  address targetContract,
		 *  address caller,
		 *  uint256 msgValue,
		 *  bytes callData
		 * )
		 *
		 * 0xde928f14 = keccak256('lsp20VerifyCall(address,address,address,uint256,bytes)')
		 */
		"0xde928f14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:hint": string;
				params: {
					callData: string;
					caller: string;
					requestor: string;
					target: string;
					value: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function lsp20VerifyCallResult(
		 *  bytes32 ,
		 *  bytes
		 * )
		 *
		 * 0xd3fc45d3 = keccak256('lsp20VerifyCallResult(bytes32,bytes)')
		 */
		"0xd3fc45d3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					callHash: string;
					callResult: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function target()
		 *
		 * 0xd4b83992 = keccak256('target()')
		 */
		"0xd4b83992": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
	};
	LSP6KeyManagerInit: {
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  bytes payload
		 * )
		 *
		 * 0x09c5eabe = keccak256('execute(bytes)')
		 */
		"0x09c5eabe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					payload: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] values,
		 *  bytes[] payloads
		 * )
		 *
		 * 0xbf0176ff = keccak256('executeBatch(uint256[],bytes[])')
		 */
		"0xbf0176ff": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					payloads: string;
					values: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeRelayCall(
		 *  bytes signature,
		 *  uint256 nonce,
		 *  uint256 validityTimestamps,
		 *  bytes payload
		 * )
		 *
		 * 0x4c8a4e74 = keccak256('executeRelayCall(bytes,uint256,uint256,bytes)')
		 */
		"0x4c8a4e74": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:hint": string;
				details: string;
				params: {
					nonce: string;
					payload: string;
					signature: string;
					validityTimestamps: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeRelayCallBatch(
		 *  bytes[] signatures,
		 *  uint256[] nonces,
		 *  uint256[] validityTimestamps,
		 *  uint256[] values,
		 *  bytes[] payloads
		 * )
		 *
		 * 0xa20856a5 = keccak256('executeRelayCallBatch(bytes[],uint256[],uint256[],uint256[],bytes[])')
		 */
		"0xa20856a5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					nonces: string;
					payloads: string;
					signatures: string;
					validityTimestamps: string;
					values: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getNonce(
		 *  address from,
		 *  uint128 channelId
		 * )
		 *
		 * 0xb44581d9 = keccak256('getNonce(address,uint128)')
		 */
		"0xb44581d9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:hint": string;
				details: string;
				params: {
					channelId: string;
					from: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function initialize(
		 *  address target_
		 * )
		 *
		 * 0xc4d66de8 = keccak256('initialize(address)')
		 */
		"0xc4d66de8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					target_: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isValidSignature(
		 *  bytes32 dataHash,
		 *  bytes signature
		 * )
		 *
		 * 0x1626ba7e = keccak256('isValidSignature(bytes32,bytes)')
		 */
		"0x1626ba7e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:warning": string;
				details: string;
				params: {
					hash: string;
					signature: string;
				};
				returns: {
					returnedStatus: string;
				};
			};
		};
		/**
		 * function lsp20VerifyCall(
		 *  address ,
		 *  address targetContract,
		 *  address caller,
		 *  uint256 msgValue,
		 *  bytes callData
		 * )
		 *
		 * 0xde928f14 = keccak256('lsp20VerifyCall(address,address,address,uint256,bytes)')
		 */
		"0xde928f14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:hint": string;
				params: {
					callData: string;
					caller: string;
					requestor: string;
					target: string;
					value: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function lsp20VerifyCallResult(
		 *  bytes32 ,
		 *  bytes
		 * )
		 *
		 * 0xd3fc45d3 = keccak256('lsp20VerifyCallResult(bytes32,bytes)')
		 */
		"0xd3fc45d3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					callHash: string;
					callResult: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function target()
		 *
		 * 0xd4b83992 = keccak256('target()')
		 */
		"0xd4b83992": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
	};
	LSP7DigitalAsset: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7DigitalAssetInitAbstract: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7CappedSupply: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenSupplyCap()
		 *
		 * 0x52058d8a = keccak256('tokenSupplyCap()')
		 */
		"0x52058d8a": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7CappedSupplyInitAbstract: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenSupplyCap()
		 *
		 * 0x52058d8a = keccak256('tokenSupplyCap()')
		 */
		"0x52058d8a": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7CompatibleERC20: {
		/**
		 * function allowance(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xdd62ed3e = keccak256('allowance(address,address)')
		 */
		"0xdd62ed3e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					operator: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0xa9059cbb = keccak256('transfer(address,uint256)')
		 */
		"0xa9059cbb": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					from: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7CompatibleERC20InitAbstract: {
		/**
		 * function allowance(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xdd62ed3e = keccak256('allowance(address,address)')
		 */
		"0xdd62ed3e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					operator: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0xa9059cbb = keccak256('transfer(address,uint256)')
		 */
		"0xa9059cbb": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					from: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7CompatibleERC20Mintable: {
		/**
		 * function allowance(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xdd62ed3e = keccak256('allowance(address,address)')
		 */
		"0xdd62ed3e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					operator: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x7580d920 = keccak256('mint(address,uint256,bool,bytes)')
		 */
		"0x7580d920": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0xa9059cbb = keccak256('transfer(address,uint256)')
		 */
		"0xa9059cbb": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					from: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7CompatibleERC20MintableInit: {
		/**
		 * function allowance(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xdd62ed3e = keccak256('allowance(address,address)')
		 */
		"0xdd62ed3e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 amount
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					operator: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function initialize(
		 *  string name_,
		 *  string symbol_,
		 *  address newOwner_,
		 *  uint256 lsp4TokenType_
		 * )
		 *
		 * 0xf542033f = keccak256('initialize(string,string,address,uint256)')
		 */
		"0xf542033f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					lsp4TokenType_: string;
					name_: string;
					newOwner_: string;
					symbol_: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x7580d920 = keccak256('mint(address,uint256,bool,bytes)')
		 */
		"0x7580d920": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0xa9059cbb = keccak256('transfer(address,uint256)')
		 */
		"0xa9059cbb": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 amount
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					amount: string;
					from: string;
					to: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7Mintable: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x7580d920 = keccak256('mint(address,uint256,bool,bytes)')
		 */
		"0x7580d920": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP7MintableInit: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  uint256 amount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xb49506fd = keccak256('authorizeOperator(address,uint256,bytes)')
		 */
		"0xb49506fd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				details: string;
				params: {
					amount: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function authorizedAmountFor(
		 *  address operator,
		 *  address tokenOwner
		 * )
		 *
		 * 0x65aeaa95 = keccak256('authorizedAmountFor(address,address)')
		 */
		"0x65aeaa95": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function decimals()
		 *
		 * 0x313ce567 = keccak256('decimals()')
		 */
		"0x313ce567": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function decreaseAllowance(
		 *  address operator,
		 *  uint256 subtractedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x7b204c4e = keccak256('decreaseAllowance(address,uint256,bytes)')
		 */
		"0x7b204c4e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					subtractedAmount: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xd72fc29a = keccak256('getOperatorsOf(address)')
		 */
		"0xd72fc29a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function increaseAllowance(
		 *  address operator,
		 *  uint256 addedAmount,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x2bc1da82 = keccak256('increaseAllowance(address,uint256,bytes)')
		 */
		"0x2bc1da82": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					addedAmount: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function initialize(
		 *  string name_,
		 *  string symbol_,
		 *  address newOwner_,
		 *  uint256 lsp4TokenType_,
		 *  bool isNonDivisible_
		 * )
		 *
		 * 0x04689a81 = keccak256('initialize(string,string,address,uint256,bool)')
		 */
		"0x04689a81": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					isNonDivisible_: string;
					lsp4TokenType_: string;
					name_: string;
					newOwner_: string;
					symbol_: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x7580d920 = keccak256('mint(address,uint256,bool,bytes)')
		 */
		"0x7580d920": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x4521748e = keccak256('revokeOperator(address,bool,bytes)')
		 */
		"0x4521748e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  uint256 amount,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x760d9bba = keccak256('transfer(address,address,uint256,bool,bytes)')
		 */
		"0x760d9bba": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  uint256[] amount,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x2d7667c9 = keccak256('transferBatch(address[],address[],uint256[],bool[],bytes[])')
		 */
		"0x2d7667c9": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					amount: string;
					data: string;
					force: string;
					from: string;
					to: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8IdentifiableDigitalAsset: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8IdentifiableDigitalAssetInitAbstract: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CappedSupply: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenSupplyCap()
		 *
		 * 0x52058d8a = keccak256('tokenSupplyCap()')
		 */
		"0x52058d8a": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CappedSupplyInitAbstract: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenSupplyCap()
		 *
		 * 0x52058d8a = keccak256('tokenSupplyCap()')
		 */
		"0x52058d8a": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CompatibleERC721: {
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getApproved(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x081812fc = keccak256('getApproved(uint256)')
		 */
		"0x081812fc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isApprovedForAll(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xe985e9c5 = keccak256('isApprovedForAll(address,address)')
		 */
		"0xe985e9c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function ownerOf(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x6352211e = keccak256('ownerOf(uint256)')
		 */
		"0x6352211e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x42842e0e = keccak256('safeTransferFrom(address,address,uint256)')
		 */
		"0x42842e0e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId,
		 *  bytes data
		 * )
		 *
		 * 0xb88d4fde = keccak256('safeTransferFrom(address,address,uint256,bytes)')
		 */
		"0xb88d4fde": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setApprovalForAll(
		 *  address operator,
		 *  bool approved
		 * )
		 *
		 * 0xa22cb465 = keccak256('setApprovalForAll(address,bool)')
		 */
		"0xa22cb465": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					approved: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenURI(
		 *  uint256
		 * )
		 *
		 * 0xc87b56dd = keccak256('tokenURI(uint256)')
		 */
		"0xc87b56dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CompatibleERC721InitAbstract: {
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getApproved(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x081812fc = keccak256('getApproved(uint256)')
		 */
		"0x081812fc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isApprovedForAll(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xe985e9c5 = keccak256('isApprovedForAll(address,address)')
		 */
		"0xe985e9c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function ownerOf(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x6352211e = keccak256('ownerOf(uint256)')
		 */
		"0x6352211e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x42842e0e = keccak256('safeTransferFrom(address,address,uint256)')
		 */
		"0x42842e0e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId,
		 *  bytes data
		 * )
		 *
		 * 0xb88d4fde = keccak256('safeTransferFrom(address,address,uint256,bytes)')
		 */
		"0xb88d4fde": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setApprovalForAll(
		 *  address operator,
		 *  bool approved
		 * )
		 *
		 * 0xa22cb465 = keccak256('setApprovalForAll(address,bool)')
		 */
		"0xa22cb465": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					approved: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenURI(
		 *  uint256
		 * )
		 *
		 * 0xc87b56dd = keccak256('tokenURI(uint256)')
		 */
		"0xc87b56dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CompatibleERC721Mintable: {
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getApproved(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x081812fc = keccak256('getApproved(uint256)')
		 */
		"0x081812fc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isApprovedForAll(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xe985e9c5 = keccak256('isApprovedForAll(address,address)')
		 */
		"0xe985e9c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xaf255b61 = keccak256('mint(address,bytes32,bool,bytes)')
		 */
		"0xaf255b61": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function ownerOf(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x6352211e = keccak256('ownerOf(uint256)')
		 */
		"0x6352211e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x42842e0e = keccak256('safeTransferFrom(address,address,uint256)')
		 */
		"0x42842e0e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId,
		 *  bytes data
		 * )
		 *
		 * 0xb88d4fde = keccak256('safeTransferFrom(address,address,uint256,bytes)')
		 */
		"0xb88d4fde": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setApprovalForAll(
		 *  address operator,
		 *  bool approved
		 * )
		 *
		 * 0xa22cb465 = keccak256('setApprovalForAll(address,bool)')
		 */
		"0xa22cb465": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					approved: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenURI(
		 *  uint256
		 * )
		 *
		 * 0xc87b56dd = keccak256('tokenURI(uint256)')
		 */
		"0xc87b56dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CompatibleERC721MintableInit: {
		/**
		 * function approve(
		 *  address operator,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x095ea7b3 = keccak256('approve(address,uint256)')
		 */
		"0x095ea7b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getApproved(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x081812fc = keccak256('getApproved(uint256)')
		 */
		"0x081812fc": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function initialize(
		 *  string name_,
		 *  string symbol_,
		 *  address newOwner_,
		 *  uint256 lsp4TokenType_,
		 *  uint256 lsp8TokenIdFormat_
		 * )
		 *
		 * 0x74823132 = keccak256('initialize(string,string,address,uint256,uint256)')
		 */
		"0x74823132": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					lsp4TokenType_: string;
					lsp8TokenIdFormat_: string;
					name_: string;
					newOwner_: string;
					symbol_: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isApprovedForAll(
		 *  address tokenOwner,
		 *  address operator
		 * )
		 *
		 * 0xe985e9c5 = keccak256('isApprovedForAll(address,address)')
		 */
		"0xe985e9c5": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xaf255b61 = keccak256('mint(address,bytes32,bool,bytes)')
		 */
		"0xaf255b61": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function name()
		 *
		 * 0x06fdde03 = keccak256('name()')
		 */
		"0x06fdde03": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function ownerOf(
		 *  uint256 tokenId
		 * )
		 *
		 * 0x6352211e = keccak256('ownerOf(uint256)')
		 */
		"0x6352211e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x42842e0e = keccak256('safeTransferFrom(address,address,uint256)')
		 */
		"0x42842e0e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function safeTransferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId,
		 *  bytes data
		 * )
		 *
		 * 0xb88d4fde = keccak256('safeTransferFrom(address,address,uint256,bytes)')
		 */
		"0xb88d4fde": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setApprovalForAll(
		 *  address operator,
		 *  bool approved
		 * )
		 *
		 * 0xa22cb465 = keccak256('setApprovalForAll(address,bool)')
		 */
		"0xa22cb465": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					approved: string;
					operator: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function symbol()
		 *
		 * 0x95d89b41 = keccak256('symbol()')
		 */
		"0x95d89b41": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenURI(
		 *  uint256
		 * )
		 *
		 * 0xc87b56dd = keccak256('tokenURI(uint256)')
		 */
		"0xc87b56dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferFrom(
		 *  address from,
		 *  address to,
		 *  uint256 tokenId
		 * )
		 *
		 * 0x23b872dd = keccak256('transferFrom(address,address,uint256)')
		 */
		"0x23b872dd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					from: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8Mintable: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xaf255b61 = keccak256('mint(address,bytes32,bool,bytes)')
		 */
		"0xaf255b61": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8MintableInit: {
		/**
		 * function authorizeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0x86a10ddd = keccak256('authorizeOperator(address,bytes32,bytes)')
		 */
		"0x86a10ddd": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function balanceOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0x70a08231 = keccak256('balanceOf(address)')
		 */
		"0x70a08231": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0x1d26fce6 = keccak256('getDataBatchForTokenIds(bytes32[],bytes32[])')
		 */
		"0x1d26fce6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					tokenIds: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x16e023b3 = keccak256('getDataForTokenId(bytes32,bytes32)')
		 */
		"0x16e023b3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					tokenId: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getOperatorsOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x49a6078d = keccak256('getOperatorsOf(bytes32)')
		 */
		"0x49a6078d": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function initialize(
		 *  string name_,
		 *  string symbol_,
		 *  address newOwner_,
		 *  uint256 lsp4TokenType_,
		 *  uint256 lsp8TokenIdFormat_
		 * )
		 *
		 * 0x74823132 = keccak256('initialize(string,string,address,uint256,uint256)')
		 */
		"0x74823132": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					lsp4TokenType_: string;
					lsp8TokenIdFormat_: string;
					name_: string;
					newOwner_: string;
					symbol_: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isOperatorFor(
		 *  address operator,
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x2a3654a4 = keccak256('isOperatorFor(address,bytes32)')
		 */
		"0x2a3654a4": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					operator: string;
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function mint(
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0xaf255b61 = keccak256('mint(address,bytes32,bool,bytes)')
		 */
		"0xaf255b61": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					to: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function revokeOperator(
		 *  address operator,
		 *  bytes32 tokenId,
		 *  bool notify,
		 *  bytes operatorNotificationData
		 * )
		 *
		 * 0xdb8c9663 = keccak256('revokeOperator(address,bytes32,bool,bytes)')
		 */
		"0xdb8c9663": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					notify: string;
					operator: string;
					operatorNotificationData: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatchForTokenIds(
		 *  bytes32[] tokenIds,
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0xbe9f0e6f = keccak256('setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])')
		 */
		"0xbe9f0e6f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKeys: string;
					dataValues: string;
					tokenIds: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataForTokenId(
		 *  bytes32 tokenId,
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0xd6c1407c = keccak256('setDataForTokenId(bytes32,bytes32,bytes)')
		 */
		"0xd6c1407c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				params: {
					dataKey: string;
					dataValue: string;
					tokenId: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function tokenIdsOf(
		 *  address tokenOwner
		 * )
		 *
		 * 0xa3b261f2 = keccak256('tokenIdsOf(address)')
		 */
		"0xa3b261f2": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenOwner: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function tokenOwnerOf(
		 *  bytes32 tokenId
		 * )
		 *
		 * 0x217b2270 = keccak256('tokenOwnerOf(bytes32)')
		 */
		"0x217b2270": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					tokenId: string;
				};
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function totalSupply()
		 *
		 * 0x18160ddd = keccak256('totalSupply()')
		 */
		"0x18160ddd": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				returns: {
					_0: string;
				};
			};
		};
		/**
		 * function transfer(
		 *  address from,
		 *  address to,
		 *  bytes32 tokenId,
		 *  bool force,
		 *  bytes data
		 * )
		 *
		 * 0x511b6952 = keccak256('transfer(address,address,bytes32,bool,bytes)')
		 */
		"0x511b6952": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferBatch(
		 *  address[] from,
		 *  address[] to,
		 *  bytes32[] tokenId,
		 *  bool[] force,
		 *  bytes[] data
		 * )
		 *
		 * 0x7e87632c = keccak256('transferBatch(address[],address[],bytes32[],bool[],bytes[])')
		 */
		"0x7e87632c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					data: string;
					force: string;
					from: string;
					to: string;
					tokenId: string;
				};
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP9Vault: {
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()
		 *
		 * 0xead3fbdf = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()')
		 */
		"0xead3fbdf": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()
		 *
		 * 0x01bfba61 = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()')
		 */
		"0x01bfba61": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function acceptOwnership()
		 *
		 * 0x79ba5097 = keccak256('acceptOwnership()')
		 */
		"0x79ba5097": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  uint256 operationType,
		 *  address target,
		 *  uint256 value,
		 *  bytes data
		 * )
		 *
		 * 0x44c028fe = keccak256('execute(uint256,address,uint256,bytes)')
		 */
		"0x44c028fe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:info": string;
				"custom:requirements": string;
				details: string;
				params: {
					data: string;
					operationType: string;
					target: string;
					value: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] operationsType,
		 *  address[] targets,
		 *  uint256[] values,
		 *  bytes[] datas
		 * )
		 *
		 * 0x31858452 = keccak256('executeBatch(uint256[],address[],uint256[],bytes[])')
		 */
		"0x31858452": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:info": string;
				"custom:requirements": string;
				details: string;
				params: {
					datas: string;
					operationsType: string;
					targets: string;
					values: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function pendingOwner()
		 *
		 * 0xe30c3978 = keccak256('pendingOwner()')
		 */
		"0xe30c3978": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					interfaceId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					newOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function universalReceiver(
		 *  bytes32 typeId,
		 *  bytes receivedData
		 * )
		 *
		 * 0x6bb56a14 = keccak256('universalReceiver(bytes32,bytes)')
		 */
		"0x6bb56a14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					receivedData: string;
					typeId: string;
				};
				returns: {
					returnedValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	LSP9VaultInit: {
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()
		 *
		 * 0xead3fbdf = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()')
		 */
		"0xead3fbdf": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()
		 *
		 * 0x01bfba61 = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()')
		 */
		"0x01bfba61": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function acceptOwnership()
		 *
		 * 0x79ba5097 = keccak256('acceptOwnership()')
		 */
		"0x79ba5097": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  uint256 operationType,
		 *  address target,
		 *  uint256 value,
		 *  bytes data
		 * )
		 *
		 * 0x44c028fe = keccak256('execute(uint256,address,uint256,bytes)')
		 */
		"0x44c028fe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:info": string;
				"custom:requirements": string;
				details: string;
				params: {
					data: string;
					operationType: string;
					target: string;
					value: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] operationsType,
		 *  address[] targets,
		 *  uint256[] values,
		 *  bytes[] datas
		 * )
		 *
		 * 0x31858452 = keccak256('executeBatch(uint256[],address[],uint256[],bytes[])')
		 */
		"0x31858452": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:info": string;
				"custom:requirements": string;
				details: string;
				params: {
					datas: string;
					operationsType: string;
					targets: string;
					values: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function initialize(
		 *  address newOwner
		 * )
		 *
		 * 0xc4d66de8 = keccak256('initialize(address)')
		 */
		"0xc4d66de8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					newOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function pendingOwner()
		 *
		 * 0xe30c3978 = keccak256('pendingOwner()')
		 */
		"0xe30c3978": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					interfaceId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address newOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					newOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function universalReceiver(
		 *  bytes32 typeId,
		 *  bytes receivedData
		 * )
		 *
		 * 0x6bb56a14 = keccak256('universalReceiver(bytes32,bytes)')
		 */
		"0x6bb56a14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					receivedData: string;
					typeId: string;
				};
				returns: {
					returnedValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	UniversalReceiverAddressStore: {
		/**
		 * function account()
		 *
		 * 0x5dab2420 = keccak256('account()')
		 */
		"0x5dab2420": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function addAddress(
		 *  address _address
		 * )
		 *
		 * 0x38eada1c = keccak256('addAddress(address)')
		 */
		"0x38eada1c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function containsAddress(
		 *  address _address
		 * )
		 *
		 * 0x322433e3 = keccak256('containsAddress(address)')
		 */
		"0x322433e3": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function getAddress(
		 *  uint256 _index
		 * )
		 *
		 * 0xb93f9b0a = keccak256('getAddress(uint256)')
		 */
		"0xb93f9b0a": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function getAllRawValues()
		 *
		 * 0xc0a4ebf4 = keccak256('getAllRawValues()')
		 */
		"0xc0a4ebf4": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function getIndex(
		 *  address _address
		 * )
		 *
		 * 0xb31610db = keccak256('getIndex(address)')
		 */
		"0xb31610db": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function length()
		 *
		 * 0x1f7b6d32 = keccak256('length()')
		 */
		"0x1f7b6d32": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function removeAddress(
		 *  address _address
		 * )
		 *
		 * 0x4ba79dfe = keccak256('removeAddress(address)')
		 */
		"0x4ba79dfe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function universalReceiverDelegate(
		 *  address sender,
		 *  uint256 ,
		 *  bytes32 typeId,
		 *  bytes
		 * )
		 *
		 * 0xa245bbda = keccak256('universalReceiverDelegate(address,uint256,bytes32,bytes)')
		 */
		"0xa245bbda": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
	};
	UniversalProfile: {
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()
		 *
		 * 0xead3fbdf = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()')
		 */
		"0xead3fbdf": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()
		 *
		 * 0x01bfba61 = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()')
		 */
		"0x01bfba61": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function acceptOwnership()
		 *
		 * 0x79ba5097 = keccak256('acceptOwnership()')
		 */
		"0x79ba5097": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  uint256 operationType,
		 *  address target,
		 *  uint256 value,
		 *  bytes data
		 * )
		 *
		 * 0x44c028fe = keccak256('execute(uint256,address,uint256,bytes)')
		 */
		"0x44c028fe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					data: string;
					operationType: string;
					target: string;
					value: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] operationsType,
		 *  address[] targets,
		 *  uint256[] values,
		 *  bytes[] datas
		 * )
		 *
		 * 0x31858452 = keccak256('executeBatch(uint256[],address[],uint256[],bytes[])')
		 */
		"0x31858452": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					datas: string;
					operationsType: string;
					targets: string;
					values: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isValidSignature(
		 *  bytes32 dataHash,
		 *  bytes signature
		 * )
		 *
		 * 0x1626ba7e = keccak256('isValidSignature(bytes32,bytes)')
		 */
		"0x1626ba7e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:warning": string;
				details: string;
				params: {
					dataHash: string;
					signature: string;
				};
				returns: {
					returnedStatus: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function pendingOwner()
		 *
		 * 0xe30c3978 = keccak256('pendingOwner()')
		 */
		"0xe30c3978": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					interfaceId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address pendingNewOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					newOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function universalReceiver(
		 *  bytes32 typeId,
		 *  bytes receivedData
		 * )
		 *
		 * 0x6bb56a14 = keccak256('universalReceiver(bytes32,bytes)')
		 */
		"0x6bb56a14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					receivedData: string;
					typeId: string;
				};
				returns: {
					returnedValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
	UniversalProfileInit: {
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()
		 *
		 * 0xead3fbdf = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_DELAY()')
		 */
		"0xead3fbdf": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()
		 *
		 * 0x01bfba61 = keccak256('RENOUNCE_OWNERSHIP_CONFIRMATION_PERIOD()')
		 */
		"0x01bfba61": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
		};
		/**
		 * function VERSION()
		 *
		 * 0xffa1ad74 = keccak256('VERSION()')
		 */
		"0xffa1ad74": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function acceptOwnership()
		 *
		 * 0x79ba5097 = keccak256('acceptOwnership()')
		 */
		"0x79ba5097": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function batchCalls(
		 *  bytes[] data
		 * )
		 *
		 * 0x6963d438 = keccak256('batchCalls(bytes[])')
		 */
		"0x6963d438": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
				params: {
					data: string;
				};
				returns: {
					results: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function execute(
		 *  uint256 operationType,
		 *  address target,
		 *  uint256 value,
		 *  bytes data
		 * )
		 *
		 * 0x44c028fe = keccak256('execute(uint256,address,uint256,bytes)')
		 */
		"0x44c028fe": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					data: string;
					operationType: string;
					target: string;
					value: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function executeBatch(
		 *  uint256[] operationsType,
		 *  address[] targets,
		 *  uint256[] values,
		 *  bytes[] datas
		 * )
		 *
		 * 0x31858452 = keccak256('executeBatch(uint256[],address[],uint256[],bytes[])')
		 */
		"0x31858452": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				"custom:warning": string;
				details: string;
				params: {
					datas: string;
					operationsType: string;
					targets: string;
					values: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getData(
		 *  bytes32 dataKey
		 * )
		 *
		 * 0x54f6127f = keccak256('getData(bytes32)')
		 */
		"0x54f6127f": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKey: string;
				};
				returns: {
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function getDataBatch(
		 *  bytes32[] dataKeys
		 * )
		 *
		 * 0xdedff9c6 = keccak256('getDataBatch(bytes32[])')
		 */
		"0xdedff9c6": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					dataKeys: string;
				};
				returns: {
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function initialize(
		 *  address initialOwner
		 * )
		 *
		 * 0xc4d66de8 = keccak256('initialize(address)')
		 */
		"0xc4d66de8": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					initialOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function isValidSignature(
		 *  bytes32 dataHash,
		 *  bytes signature
		 * )
		 *
		 * 0x1626ba7e = keccak256('isValidSignature(bytes32,bytes)')
		 */
		"0x1626ba7e": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:warning": string;
				details: string;
				params: {
					dataHash: string;
					signature: string;
				};
				returns: {
					returnedStatus: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function owner()
		 *
		 * 0x8da5cb5b = keccak256('owner()')
		 */
		"0x8da5cb5b": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
		/**
		 * function pendingOwner()
		 *
		 * 0xe30c3978 = keccak256('pendingOwner()')
		 */
		"0xe30c3978": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:info": string;
				details: string;
			};
		};
		/**
		 * function renounceOwnership()
		 *
		 * 0x715018a6 = keccak256('renounceOwnership()')
		 */
		"0x715018a6": {
			sig: string;
			inputs: any[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:danger": string;
				"custom:requirements": string;
				details: string;
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setData(
		 *  bytes32 dataKey,
		 *  bytes dataValue
		 * )
		 *
		 * 0x7f23690c = keccak256('setData(bytes32,bytes)')
		 */
		"0x7f23690c": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKey: string;
					dataValue: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function setDataBatch(
		 *  bytes32[] dataKeys,
		 *  bytes[] dataValues
		 * )
		 *
		 * 0x97902421 = keccak256('setDataBatch(bytes32[],bytes[])')
		 */
		"0x97902421": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				"custom:requirements": string;
				details: string;
				params: {
					dataKeys: string;
					dataValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function supportsInterface(
		 *  bytes4 interfaceId
		 * )
		 *
		 * 0x01ffc9a7 = keccak256('supportsInterface(bytes4)')
		 */
		"0x01ffc9a7": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				details: string;
				params: {
					interfaceId: string;
				};
				returns: {
					_0: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function transferOwnership(
		 *  address pendingNewOwner
		 * )
		 *
		 * 0xf2fde38b = keccak256('transferOwnership(address)')
		 */
		"0xf2fde38b": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: any[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:requirements": string;
				details: string;
				params: {
					newOwner: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
		/**
		 * function universalReceiver(
		 *  bytes32 typeId,
		 *  bytes receivedData
		 * )
		 *
		 * 0x6bb56a14 = keccak256('universalReceiver(bytes32,bytes)')
		 */
		"0x6bb56a14": {
			sig: string;
			inputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			name: string;
			outputs: {
				internalType: string;
				name: string;
				type: string;
			}[];
			stateMutability: string;
			type: string;
			devdoc: {
				"custom:events": string;
				details: string;
				params: {
					receivedData: string;
					typeId: string;
				};
				returns: {
					returnedValues: string;
				};
			};
			userdoc: {
				notice: string;
			};
		};
	};
};
export declare const ContractsDocs: {};
export declare const StateVariables: {
	LSP16UniversalFactory: {
		/**
		 * stateVariable _EMPTY_BYTE()
		 *
		 * 0x3bc60789 = keccak256('_EMPTY_BYTE()')
		 */
		"0x3bc60789": {
			sig: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CompatibleERC721: {
		/**
		 * stateVariable _operatorApprovals()
		 *
		 * 0x87172cf3 = keccak256('_operatorApprovals()')
		 */
		"0x87172cf3": {
			sig: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
	LSP8CompatibleERC721InitAbstract: {
		/**
		 * stateVariable _operatorApprovals()
		 *
		 * 0x87172cf3 = keccak256('_operatorApprovals()')
		 */
		"0x87172cf3": {
			sig: string;
			type: string;
			devdoc: {
				details: string;
			};
		};
	};
};
/**
 * @dev ERC165 interface IDs for the LSP interface standards + some backward compatible ERC token standards.
 * These `bytes4` values can be used to detect if a contract implements a specific interface
 * with `supportsInterface(interfaceId)`.
 */
export declare const INTERFACE_IDS: {
	ERC165: string;
	ERC1271: string;
	ERC20: string;
	ERC20Metadata: string;
	ERC223: string;
	ERC721: string;
	ERC721Metadata: string;
	ERC777: string;
	ERC1155: string;
	ERC725X: string;
	ERC725Y: string;
	LSP0ERC725Account: string;
	LSP1UniversalReceiver: string;
	LSP1UniversalReceiverDelegate: string;
	LSP6KeyManager: string;
	LSP7DigitalAsset: string;
	LSP8IdentifiableDigitalAsset: string;
	LSP9Vault: string;
	LSP11BasicSocialRecovery: string;
	LSP14Ownable2Step: string;
	LSP17Extendable: string;
	LSP17Extension: string;
	LSP20CallVerification: string;
	LSP20CallVerifier: string;
	LSP25ExecuteRelayCall: string;
};
/**
 * @dev values returned by the `isValidSignature` function of the ERC1271 standard.
 * Can be used to check if a signature is valid or not.
 */
export declare const ERC1271_VALUES: {
	SUCCESS_VALUE: string;
	FAIL_VALUE: string;
};
/**
 * @dev values returned by the `lsp20VerifyCall` and `lsp20VerifyCallResult` functions of the LSP20 standard.
 * Can be used to check if a calldata payload was check and verified.
 */
export declare const LSP20_SUCCESS_VALUES: {
	VERIFY_CALL: {
		NO_POST_VERIFICATION: string;
		WITH_POST_VERIFICATION: string;
	};
	VERIFY_CALL_RESULT: string;
};
/**
 * @dev list of ERC725X operation types.
 * @see https://github.com/ERC725Alliance/ERC725/blob/develop/docs/ERC-725.md#execute
 */
export declare const OPERATION_TYPES: {
	CALL: number;
	CREATE: number;
	CREATE2: number;
	STATICCALL: number;
	DELEGATECALL: number;
};
export type LSP2ArrayKey = {
	length: string;
	index: string;
};
export type LSPSupportedStandard = {
	key: string;
	value: string;
};
export type LSP3ProfileMetadataJSON = {
	LSP3Profile: LSP3ProfileMetadata;
};
export type LSP3ProfileMetadata = {
	name: string;
	description: string;
	profileImage?: ImageMetadata[];
	backgroundImage?: ImageMetadata[];
	tags?: string[];
	links?: LinkMetadata[];
	avatar?: AssetMetadata[];
};
export type LSP4DigitalAssetMetadataJSON = {
	LSP4Metadata: LSP4DigitalAssetMetadata;
};
export type LSP4DigitalAssetMetadata = {
	description: string;
	links: LinkMetadata[];
	images: ImageMetadata[][];
	assets: AssetMetadata[];
	icon: ImageMetadata[];
};
export type Verification = {
	method: string;
	data: string;
	source?: string;
};
export type ImageMetadata = {
	width: number;
	height: number;
	verification?: Verification;
	url: string;
};
export type LinkMetadata = {
	title: string;
	url: string;
};
export type AssetMetadata = {
	verification?: Verification;
	url: string;
	fileType: string;
};
/**
 * @dev list of ERC725Y keys from the LSP standards.
 * Can be used to detect if a contract implements a specific LSP Metadata standard
 * and contain a set of pre-defined ERC725Y Data Keys.
 */
export declare const SupportedStandards: {
	LSP3Profile: LSPSupportedStandard;
	LSP4DigitalAsset: LSPSupportedStandard;
	LSP9Vault: LSPSupportedStandard;
};
/**
 * @dev list of ERC725Y Metadata keys from the LSP standards.
 * @see https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md
 */
export declare const ERC725YDataKeys: {
	LSP1: {
		LSP1UniversalReceiverDelegatePrefix: string;
		LSP1UniversalReceiverDelegate: string;
	};
	LSP3: {
		SupportedStandards_LSP3: string;
		LSP3Profile: string;
	};
	LSP4: {
		SupportedStandards_LSP4: string;
		LSP4TokenName: string;
		LSP4TokenSymbol: string;
		LSP4TokenType: string;
		LSP4Metadata: string;
		LSP4CreatorsMap: string;
		"LSP4Creators[]": LSP2ArrayKey;
	};
	LSP5: {
		LSP5ReceivedAssetsMap: string;
		"LSP5ReceivedAssets[]": LSP2ArrayKey;
	};
	LSP6: {
		"AddressPermissions[]": LSP2ArrayKey;
		AddressPermissionsPrefix: string;
		"AddressPermissions:Permissions": string;
		"AddressPermissions:AllowedERC725YDataKeys": string;
		"AddressPermissions:AllowedCalls": string;
	};
	LSP8: {
		LSP8TokenIdFormat: string;
		LSP8TokenMetadataBaseURI: string;
		LSP8ReferenceContract: string;
	};
	LSP9: {
		SupportedStandards_LSP9: string;
	};
	LSP10: {
		LSP10VaultsMap: string;
		"LSP10Vaults[]": LSP2ArrayKey;
	};
	LSP12: {
		LSP12IssuedAssetsMap: string;
		"LSP12IssuedAssets[]": LSP2ArrayKey;
	};
	LSP17: {
		LSP17ExtensionPrefix: string;
	};
};
/**
 * @dev The types of calls for an AllowedCall
 */
export declare const CALLTYPE: {
	VALUE: string;
	CALL: string;
	STATICCALL: string;
	DELEGATECALL: string;
};
/**
 * @dev `bytes32` hex value for all the LSP6 permissions excluding REENTRANCY, DELEGATECALL and SUPER_DELEGATECALL for security (these should be set manually)
 */
export declare const ALL_PERMISSIONS = "0x00000000000000000000000000000000000000000000000000000000007f3f7f";
export type LSP6PermissionName = keyof typeof PERMISSIONS;
/**
 * @dev List of `bytes32` permissions from LSP6 Key Manager Standard
 */
export declare const PERMISSIONS: {
	CHANGEOWNER: string;
	ADDCONTROLLER: string;
	EDITPERMISSIONS: string;
	ADDEXTENSIONS: string;
	CHANGEEXTENSIONS: string;
	ADDUNIVERSALRECEIVERDELEGATE: string;
	CHANGEUNIVERSALRECEIVERDELEGATE: string;
	REENTRANCY: string;
	SUPER_TRANSFERVALUE: string;
	TRANSFERVALUE: string;
	SUPER_CALL: string;
	CALL: string;
	SUPER_STATICCALL: string;
	STATICCALL: string;
	SUPER_DELEGATECALL: string;
	DELEGATECALL: string;
	DEPLOY: string;
	SUPER_SETDATA: string;
	SETDATA: string;
	ENCRYPT: string;
	DECRYPT: string;
	SIGN: string;
	EXECUTE_RELAY_CALL: string;
};
/**
 * @dev list of standard type IDs ("hooks") defined in the LSPs that can be used to notify
 * a LSP1 compliant contract about certain type of transactions or information
 * (e.g: token transfer, vault transfer, ownership transfer, etc...)
 */
export declare const LSP1_TYPE_IDS: {
	LSP0ValueReceived: string;
	LSP0OwnershipTransferStarted: string;
	LSP0OwnershipTransferred_SenderNotification: string;
	LSP0OwnershipTransferred_RecipientNotification: string;
	LSP7Tokens_SenderNotification: string;
	LSP7Tokens_RecipientNotification: string;
	LSP7Tokens_OperatorNotification: string;
	LSP8Tokens_SenderNotification: string;
	LSP8Tokens_RecipientNotification: string;
	LSP8Tokens_OperatorNotification: string;
	LSP9ValueReceived: string;
	LSP9OwnershipTransferStarted: string;
	LSP9OwnershipTransferred_SenderNotification: string;
	LSP9OwnershipTransferred_RecipientNotification: string;
	LSP14OwnershipTransferStarted: string;
	LSP14OwnershipTransferred_SenderNotification: string;
	LSP14OwnershipTransferred_RecipientNotification: string;
};
/**
 * @dev List of LSP4 Token types to describe the type of token a digital asset contract represents.
 * @see for details see: https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-4-DigitalAsset-Metadata.md#lsp4tokentype
 */
export declare const LSP4_TOKEN_TYPES: {
	TOKEN: number;
	NFT: number;
	COLLECTION: number;
};
/**
 * @dev List of LSP8 Token ID Formats that can be used to create different types of NFTs and represent each NFT identifiers (= tokenIds) differently.
 * @see For details see: https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-8-IdentifiableDigitalAsset.md#lsp8tokenidformat
 */
export declare const LSP8_TOKEN_ID_FORMAT: {
	NUMBER: number;
	STRING: number;
	ADDRESS: number;
	UNIQUE_ID: number;
	HASH: number;
	MIXED_DEFAULT_NUMBER: number;
	MIXED_DEFAULT_STRING: number;
	MIXED_DEFAULT_ADDRESS: number;
	MIXED_DEFAULT_UNIQUE_ID: number;
	MIXED_DEFAULT_HASH: number;
};
/**
 * @dev LSP25 version number for signing `executeRelayCall(...)` transaction using EIP191
 * @see for details see: https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-25-ExecuteRelayCall.md#executerelaycall
 */
export declare const LSP25_VERSION = 25;

export {};
